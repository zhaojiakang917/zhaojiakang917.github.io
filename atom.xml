<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Read the fucking ♂ source code</title>
  
  <subtitle>每天学习新姿势</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-29T11:12:45.388Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yori Zhao(赵佳康)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一种强大、可靠的React Native拆包以及热更新方案，基于CodePush，Metro</title>
    <link href="http://yoursite.com/2019/09/29/%E4%B8%80%E7%A7%8D%E5%BC%BA%E5%A4%A7%E3%80%81%E5%8F%AF%E9%9D%A0%E7%9A%84React%20Native%E6%8B%86%E5%8C%85%E4%BB%A5%E5%8F%8A%E7%83%AD%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88%EF%BC%8C%E5%9F%BA%E4%BA%8ECodePush%EF%BC%8CMetro/"/>
    <id>http://yoursite.com/2019/09/29/一种强大、可靠的React Native拆包以及热更新方案，基于CodePush，Metro/</id>
    <published>2019-09-29T10:57:14.000Z</published>
    <updated>2019-09-29T11:12:45.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h2><p>因为需要将各业务线通过划分jsbundle的形式进行分离，以达到</p><ul><li>各个业务包独立更新、回滚以及版本管控</li><li>增量加载，优化启动速度</li><li>优化增量更新，只对单独某一业务包增量更新</li></ul><h2 id="案例参考"><a href="#案例参考" class="headerlink" title="案例参考"></a>案例参考</h2><p>参考了携程以及各种网络版本的做法，大致总结为三种</p><a id="more"></a><ul><li>修改RN打包脚本，使其支持打包时生成基础包以及业务包，并合理分配moduleID（携程方案）<ul><li>优点：定制化高，性能优化好，可以做到增量加载</li><li>缺点：维护成本高，对RN源码侵入性大，兼容性差</li></ul></li><li>不修改打包脚本，纯粹通过diff工具来拆分基础包与业务包，加载前再粘合起来然后加载<ul><li>优点：简易便于维护，开发量小，不需要更改RN源码</li><li>缺点：定制化弱，对性能有一定影响，无法增量加载</li></ul></li><li>基于Metro配置来自定义生成的ModuleId，以达到拆分基础，业务包目的<ul><li>优点：维护成本低，不需要更改RN打包源码，兼容性好</li><li>缺点：暂未发现</li></ul></li></ul><p>综上所述，js端的bundle拆分用第三种方案最优</p><h2 id="JSBundle拆分"><a href="#JSBundle拆分" class="headerlink" title="JSBundle拆分"></a>JSBundle拆分</h2><p>因为Metro官方文档过于简陋，实在看不懂，所以借鉴了一些使用Metro的项目</p><p>比如（感谢开原作者的贡献）：<a href="https://github.com/smallnew/react-native-multibundler" target="_blank" rel="noopener">https://github.com/smallnew/react-native-multibundler</a></p><p>这个项目较为完整，简要配置下就可以直接使用，所以js端拆包主要参考自这个项目，通过配置Metro的createModuleIdFactory，processModuleFilter回调，我们可以很容易的自定义生成moduleId，以及筛选基础包内容，来达到基础业务包分离的目的，因为实际上拆分jsbundle主要工作也就在于moduleId分配以及打包filter配置，我们可以观察下打包后的js代码结构</p><p>通过<code>react-native bundle --platform android --dev false --entry-file index.common.js --bundle-output ./CodePush/common.android.bundle.js --assets-dest ./CodePush --config common.bundle.js --minify false</code>指令打出基础包（minify设为false便于查看打包后源码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line"></span><br><span class="line">  global.__r = metroRequire;</span><br><span class="line">  global.__d = define;</span><br><span class="line">  global.__c = clear;</span><br><span class="line">  global.__registerSegment = registerSegment;</span><br><span class="line">  <span class="keyword">var</span> modules = clear();</span><br><span class="line">  <span class="keyword">var</span> EMPTY = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> _ref = &#123;&#125;,</span><br><span class="line">      hasOwnProperty = _ref.hasOwnProperty;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    modules = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> modules;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">factory, moduleId, dependencyMap</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modules[moduleId] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modules[moduleId] = &#123;</span><br><span class="line">      dependencyMap: dependencyMap,</span><br><span class="line">      factory: factory,</span><br><span class="line">      hasError: <span class="literal">false</span>,</span><br><span class="line">      importedAll: EMPTY,</span><br><span class="line">      importedDefault: EMPTY,</span><br><span class="line">      isInitialized: <span class="literal">false</span>,</span><br><span class="line">      publicModule: &#123;</span><br><span class="line">        exports: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">metroRequire</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> moduleIdReallyIsNumber = moduleId;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = modules[moduleIdReallyIsNumber];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.isInitialized ? <span class="built_in">module</span>.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, <span class="built_in">module</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里主要看<code>__r</code>，<code>__d</code>两个变量，赋值了两个方法<code>metroRequire</code>，<code>define</code>，具体逻辑也很简单，<code>define</code>相当于在表中注册，<code>require</code>相当于在表中查找，js代码中的<code>import</code>，<code>export</code>编译后就就转换成了<code>__d</code>与<code>__r</code>，再观察一下原生Metro代码的<code>node_modules/metro/src/lib/createModuleIdFactory.js</code>文件，代码为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createModuleIdFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileToIdMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> nextId = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id = fileToIdMap.get(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> id !== <span class="string">"number"</span>) &#123;</span><br><span class="line">      id = nextId++;</span><br><span class="line">      fileToIdMap.set(path, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createModuleIdFactory;</span><br></pre></td></tr></table></figure></p><p>逻辑比较简单，如果查到map里没有记录这个模块则id自增，然后将该模块记录到map中，所以从这里可以看出，官方代码生成moduleId的规则就是自增，所以这里要替换成我们自己的配置逻辑，我们要做拆包就需要保证这个id不能重复，但是这个id只是在打包时生成，如果我们单独打业务包，基础包，这个id就会丢失，所以对于id的处理，我们还是可以参考上述开源项目，进行每个包有十万位间隔空间的划分，又或者通过每个模块自己的路径或者uuid等去分配，来避免碰撞，但是字符串会增大包的体积，这里不推荐这种做法。所以总结起来js端拆包还是比较容易的，这里就不再赘述</p><h2 id="CodePush改造-代码为Android端，iOS端类似"><a href="#CodePush改造-代码为Android端，iOS端类似" class="headerlink" title="CodePush改造(代码为Android端，iOS端类似)"></a>CodePush改造(代码为Android端，iOS端类似)</h2><p>用过CodePush的同学都能感受到它强大的功能以及稳定的表现，更新，回滚，强更，环境管控，版本管控等等功能，越用越香，但是它不支持拆包更新，如果自己重新实现一套功能类似的代价较大，所以我尝试通过改造来让它支持多包独立更新，来满足我们拆包的也无需求，改造原则：</p><ul><li>尽量不入侵其单个包更新的流程</li><li>基于现有的逻辑基础增加多包更新的能力，不会对其原本流程做更改</li></ul><p>通过阅读源码，我们可以发现，只要隔离了包下载的路径以及每个包自己的状态信息文件，然后对多包并发更新时，做一些同步处理，就可以做到多包独立更新</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/29/16d7c673afd6d353?w=477&amp;h=263&amp;f=png&amp;s=28264" alt><br>改造后的包存放路径如上图所示</p><p>app.json文件存放包的信息，由检测更新的接口返回以及本地逻辑写入的一些信息，比如hash值，下载url，更新包的版本号，bundle的相对路径(本地代码写入)等等</p><p>codepush.json会记录当前包的hash值以及上一个包的hash值，用于回滚，所以正常来讲一个包会有两个版本，上一版本用于备份回滚，回滚成功后会删除掉当前版本，具体逻辑可以自行阅读了解，所以我这里总结一下改动</p><h3 id="Native改动："><a href="#Native改动：" class="headerlink" title="Native改动："></a>Native改动：</h3><p>主要改动为增加pathPrefix和bundleFileName两个传参，用于分离bundle下载的路径</p><p>增加了bundleFileName和pathPrefix参数的方法有</p><ul><li>downloadUpdate(final ReadableMap updatePackage, final boolean notifyProgress, String pathPrefix, String bundleFileName)  </li><li>getUpdateMetadata(String pathPrefix, String bundleFileName, final int updateState)</li><li>getNewStatusReport(String pathPrefix, String bundleFileName) {</li><li>installUpdate(final ReadableMap updatePackage, final int installMode, final int minimumBackgroundDuration, String pathPrefix, String bundleFileName)</li><li>restartApp(boolean onlyIfUpdateIsPending, String pathPrefix, String bundleFileName)</li><li>downloadAndReplaceCurrentBundle(String remoteBundleUrl, String pathPrefix, String bundleFileName) (该方法未使用)</li></ul><p>只增加了pathPrefix参数的方法有</p><ul><li>isFailedUpdate(String packageHash, String pathPrefix)</li><li>getLatestRollbackInfo(String pathPrefix)</li><li>setLatestRollbackInfo(String packageHash, String pathPrefix)</li><li>isFirstRun(String packageHash, String pathPrefix)</li><li>notifyApplicationReady(String pathPrefix)</li><li>recordStatusReported(ReadableMap statusReport, String pathPrefix)</li><li>saveStatusReportForRetry(ReadableMap statusReport, String pathPrefix)</li><li>clearUpdates(String pathPrefix) (该方法未使用)</li></ul><h3 id="对更新包状态管理的改动"><a href="#对更新包状态管理的改动" class="headerlink" title="对更新包状态管理的改动"></a>对更新包状态管理的改动</h3><p>因为官方代码只对单个包状态做管理，所以这里我们要改为支持对多个包状态做管理</p><ul><li>sIsRunningBinaryVersion：标识当前是否运行的初始包（未更新），改成用数组或者map记录</li><li>sNeedToReportRollback：标识当前包是否需要汇报回滚，改动如上</li><li>一些持久化存储的key，需要增加pathPrefix字段来标识是哪一个包的key</li></ul><h3 id="对初始ReactRootView的改动"><a href="#对初始ReactRootView的改动" class="headerlink" title="对初始ReactRootView的改动"></a>对初始ReactRootView的改动</h3><p>因为拆包后，对包的加载是增量的，所以我们在初始化业务场景A的ReactRootView时，增量加载业务A的jsbundle，其他业务场景同理，获取业务A jsbundle路径需要借助改造后的CodePush方法，通过传入bundleFileName，pathPrefix</p><ul><li>CodePush.getJSBundleFile(“buz.android.bundle.js”, “Buz1”)</li></ul><h3 id="对包加载流程的改动"><a href="#对包加载流程的改动" class="headerlink" title="对包加载流程的改动"></a>对包加载流程的改动</h3><p>官方代码为加载完bundle即重新创建整个RN环境，拆包后此种方法不可取，如果业务包更新完后，重新加载业务包然后再重建RN环境，会导致基础包代码丢失而报错，所以增加一个只加载jsbundle，不重建RN环境的方法，在更新业务包的时候使用</p><p>比如官方更新代码为：</p><p>CodePushNativeModule#loadBundle方法<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> loadBundle(<span class="keyword">String</span> pathPrefix, <span class="keyword">String</span> bundleFileName) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// #1) Get the ReactInstanceManager instance, which is what includes the</span></span><br><span class="line">        <span class="comment">//     logic to reload the current React context.</span></span><br><span class="line">        <span class="keyword">final</span> ReactInstanceManager instanceManager = resolveInstanceManager();</span><br><span class="line">        <span class="keyword">if</span> (instanceManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">String</span> latestJSBundleFile = mCodePush.getJSBundleFileInternal(bundleFileName, pathPrefix);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// #2) Update the locally stored JS bundle file path</span></span><br><span class="line">        setJSBundle(instanceManager, latestJSBundleFile);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// #3) Get the context creation method and fire it on the UI thread (which RN enforces)</span></span><br><span class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// We don't need to resetReactRootViews anymore</span></span><br><span class="line">                    <span class="comment">// due the issue https://github.com/facebook/react-native/issues/14533</span></span><br><span class="line">                    <span class="comment">// has been fixed in RN 0.46.0</span></span><br><span class="line">                    <span class="comment">//resetReactRootViews(instanceManager);</span></span><br><span class="line">    </span><br><span class="line">                    instanceManager.recreateReactContextInBackground();</span><br><span class="line">                    mCodePush.initializeUpdateAfterRestart(pathPrefix);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// The recreation method threw an unknown exception</span></span><br><span class="line">                    <span class="comment">// so just simply fallback to restarting the Activity (if it exists)</span></span><br><span class="line">                    loadBundleLegacy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// Our reflection logic failed somewhere</span></span><br><span class="line">        <span class="comment">// so fall back to restarting the Activity (if it exists)</span></span><br><span class="line">        CodePushUtils.<span class="built_in">log</span>(<span class="string">"Failed to load the bundle, falling back to restarting the Activity (if it exists). "</span> + e.getMessage());</span><br><span class="line">        loadBundleLegacy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改造为业务包增量加载，基础包才重建ReactContext<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"CommonBundle"</span>.equals(pathPrefix)) &#123;</span><br><span class="line">                <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// We don't need to resetReactRootViews anymore</span></span><br><span class="line">                            <span class="comment">// due the issue https://github.com/facebook/react-native/issues/14533</span></span><br><span class="line">                            <span class="comment">// has been fixed in RN 0.46.0</span></span><br><span class="line">                            <span class="comment">//resetReactRootViews(instanceManager);</span></span><br><span class="line"></span><br><span class="line">                            instanceManager.recreateReactContextInBackground();</span><br><span class="line">                            mCodePush.initializeUpdateAfterRestart(pathPrefix);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="comment">// The recreation method threw an unknown exception</span></span><br><span class="line">                            <span class="comment">// so just simply fallback to restarting the Activity (if it exists)</span></span><br><span class="line">                            loadBundleLegacy();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                JSBundleLoader latestJSBundleLoader;</span><br><span class="line">                <span class="keyword">if</span> (latestJSBundleFile.toLowerCase().startsWith(<span class="string">"assets://"</span>)) &#123;</span><br><span class="line">                    latestJSBundleLoader = JSBundleLoader.createAssetLoader(getReactApplicationContext(), latestJSBundleFile, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    latestJSBundleLoader = JSBundleLoader.createFileLoader(latestJSBundleFile);</span><br><span class="line">                &#125;</span><br><span class="line">                CatalystInstance catalystInstance = resolveInstanceManager().getCurrentReactContext().getCatalystInstance();</span><br><span class="line">                latestJSBundleLoader.loadScript(catalystInstance);</span><br><span class="line">                mCodePush.initializeUpdateAfterRestart(pathPrefix);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>启动业务ReactRootView时增量加载jsbundle的逻辑同上</p><h3 id="对JS端的改动"><a href="#对JS端的改动" class="headerlink" title="对JS端的改动"></a>对JS端的改动</h3><ul><li>CodePush.sync(options): options增加bundleFileName，pathPrefix参数，由业务代码传递进来然后传递给native</li><li>将上述参数涉及到的方法，改造成能够传递给Native method</li><li>CodePush.sync方法官方不支持多包并发，碰到有重复的sync请求会将重复的丢弃，这里我们需要用一个队列将这些重复的任务管理起来，排队执行（为了简易安全，暂时不做并行更新，尽量改造成串行更新）</li></ul><p>CodePush#sync代码<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sync = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> syncInProgress = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> setSyncCompleted = (<span class="params"></span>) =&gt; &#123; syncInProgress = <span class="literal">false</span>; &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">return</span> (<span class="params">options = &#123;&#125;, syncStatusChangeCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">let</span> syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params"><span class="keyword">typeof</span> syncStatusChangeCallback === "<span class="keyword">function</span>"</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      syncStatusCallbackWithTryCatch = (<span class="params">...args</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          syncStatusChangeCallback(<span class="params">...args</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125; <span class="keyword">catch</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          log(<span class="params">`An error has occurred : $&#123;error.stack&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params"><span class="keyword">typeof</span> downloadProgressCallback === "<span class="keyword">function</span>"</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      downloadProgressCallbackWithTryCatch = (<span class="params">...args</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          downloadProgressCallback(<span class="params">...args</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125; <span class="keyword">catch</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          log(<span class="params">`An error has occurred: $&#123;error.stack&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">syncInProgress</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">typeof</span> syncStatusCallbackWithTryCatch === "<span class="keyword">function</span>"</span></span></span><br><span class="line"><span class="function"><span class="params">        ? syncStatusCallbackWithTryCatch(<span class="params">CodePush.SyncStatus.SYNC_IN_PROGRESS</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        : log(<span class="params">"Sync already <span class="keyword">in</span> progress."</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="params">CodePush.SyncStatus.SYNC_IN_PROGRESS</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    syncInProgress = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> syncPromise = syncInternal(<span class="params">options, syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch, handleBinaryVersionMismatchCallback</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    syncPromise</span></span></span><br><span class="line"><span class="function"><span class="params">      .then(<span class="params">setSyncCompleted</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">      .<span class="keyword">catch</span>(<span class="params">setSyncCompleted</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> syncPromise;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)<span class="params">()</span>;</span></span><br></pre></td></tr></table></figure></p><p>改造后<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sync = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> syncInProgress = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//增加一个管理并发任务的队列</span></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> syncQueue = [];</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> setSyncCompleted = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    syncInProgress = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    回调完成后执行队列里的任务</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">syncQueue.length &gt; 0</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      log(<span class="params">`Execute queue task, current queue: $&#123;syncQueue.length&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">let</span> task = syncQueue.shift(<span class="params">1</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      sync(<span class="params">task.options, task.syncStatusChangeCallback, task.downloadProgressCallback, task.handleBinaryVersionMismatchCallback</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">return</span> (<span class="params">options = &#123;&#125;, syncStatusChangeCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">let</span> syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params"><span class="keyword">typeof</span> syncStatusChangeCallback === "<span class="keyword">function</span>"</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      syncStatusCallbackWithTryCatch = (<span class="params">...args</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          syncStatusChangeCallback(<span class="params">...args</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125; <span class="keyword">catch</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          log(<span class="params">`An error has occurred : $&#123;error.stack&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params"><span class="keyword">typeof</span> downloadProgressCallback === "<span class="keyword">function</span>"</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      downloadProgressCallbackWithTryCatch = (<span class="params">...args</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          downloadProgressCallback(<span class="params">...args</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125; <span class="keyword">catch</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          log(<span class="params">`An error has occurred: $&#123;error.stack&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">syncInProgress</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">typeof</span> syncStatusCallbackWithTryCatch === "<span class="keyword">function</span>"</span></span></span><br><span class="line"><span class="function"><span class="params">        ? syncStatusCallbackWithTryCatch(<span class="params">CodePush.SyncStatus.SYNC_IN_PROGRESS</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">        : log(<span class="params">"Sync already <span class="keyword">in</span> progress."</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="comment">//检测到并发任务，放入队列排队</span></span></span></span><br><span class="line"><span class="function"><span class="params">      syncQueue.push(<span class="params">&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        options,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        syncStatusChangeCallback,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        downloadProgressCallback,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        handleBinaryVersionMismatchCallback</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      log(<span class="params">`Enqueue task, current queue: $&#123;syncQueue.length&#125;`</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="params">CodePush.SyncStatus.SYNC_IN_PROGRESS</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    syncInProgress = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> syncPromise = syncInternal(<span class="params">options, syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch, handleBinaryVersionMismatchCallback</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    syncPromise</span></span></span><br><span class="line"><span class="function"><span class="params">      .then(<span class="params">setSyncCompleted</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">      .<span class="keyword">catch</span>(<span class="params">setSyncCompleted</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> syncPromise;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)<span class="params">()</span>;</span></span><br></pre></td></tr></table></figure></p><ul><li>notifyApplicationReady: 官方代码这个方法只会执行一次，主要用于更新之前初始化一些参数，然后缓存结果，后续调用直接返回缓存结果，所以这里我们要改造成不缓存结果，每次都执行</li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>该方案主流程已经ok，多包并发更新，单包独立更新基本没有问题，现在还在边界场景以及压力测试当中，待方案健壮后再上源码做详细分析</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景需求&quot;&gt;&lt;a href=&quot;#背景需求&quot; class=&quot;headerlink&quot; title=&quot;背景需求&quot;&gt;&lt;/a&gt;背景需求&lt;/h2&gt;&lt;p&gt;因为需要将各业务线通过划分jsbundle的形式进行分离，以达到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个业务包独立更新、回滚以及版本管控&lt;/li&gt;
&lt;li&gt;增量加载，优化启动速度&lt;/li&gt;
&lt;li&gt;优化增量更新，只对单独某一业务包增量更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;案例参考&quot;&gt;&lt;a href=&quot;#案例参考&quot; class=&quot;headerlink&quot; title=&quot;案例参考&quot;&gt;&lt;/a&gt;案例参考&lt;/h2&gt;&lt;p&gt;参考了携程以及各种网络版本的做法，大致总结为三种&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>基于Node.js搭建一个微信机器人</title>
    <link href="http://yoursite.com/2019/05/05/%E5%9F%BA%E4%BA%8ENode.js%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2019/05/05/基于Node.js搭建一个微信机器人/</id>
    <published>2019-05-05T03:51:43.000Z</published>
    <updated>2019-08-21T08:35:35.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将要实现的功能"><a href="#将要实现的功能" class="headerlink" title="将要实现的功能"></a>将要实现的功能</h2><ul><li>自动聊天，可以把它扔群里跟大家<del>聊骚</del>聊天</li><li>每日简报，给同事家人定时播报头条简报</li><li>每日天气预报，给你老婆<del>程序猿哪来的老婆</del>嘘寒问暖</li></ul><h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p>本项目基于<a href="https://github.com/Chatie/wechaty" target="_blank" rel="noopener">Wechaty</a>，这是一个封装了微信基本事件的开源库，比如<code>onLogin（登陆事件）</code>，<code>onMessage（消息事件）</code>，<code>onLogout（登出事件）</code>等等，详细使用可参考该项目文档，<br>有了这些事件，我们可以基于Node.js很轻松的开发一些常用功能。</p><p>本项目Node版本需要 &gt;= 10，可以自行安装nvm进行版本切换。</p><p>本项目工程代码<a href="https://github.com/zjkhiyori/wechat-boy" target="_blank" rel="noopener">wechat-boy</a><br><a id="more"></a></p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>首先新建工程，创建一个package.json，引入要用的库<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>, <span class="comment">// es6转es5，不想写es6可以不用这两个</span></span><br><span class="line">    <span class="string">"node-schedule"</span>: <span class="string">"^1.3.2"</span>,  <span class="comment">// 定时任务</span></span><br><span class="line">    <span class="string">"qrcode-terminal"</span>: <span class="string">"^0.12.0"</span>, <span class="comment">// 打印登陆二维码</span></span><br><span class="line">    <span class="string">"rimraf"</span>: <span class="string">"^2.6.3"</span>, <span class="comment">// 终端指令工具</span></span><br><span class="line">    <span class="string">"wechaty"</span>: <span class="string">"^0.22.6"</span>, <span class="comment">// Wechaty基础库</span></span><br><span class="line">    <span class="string">"moment"</span>: <span class="string">"2.24.0"</span> <span class="comment">// 日期处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"axios"</span>: <span class="string">"^0.18.0"</span> <span class="comment">// 网络请求</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>然后执行npm install 或者 yarn，然后可以在index.js里简单写一个demo，<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QrTerm <span class="keyword">from</span> <span class="string">'qrcode-terminal'</span>;</span><br><span class="line"></span><br><span class="line">  Wechaty.instance(&#123; name: <span class="string">'wechat-boy'</span> &#125;)</span><br><span class="line">  .on(<span class="string">'scan'</span>, <span class="function"><span class="params">qrcode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`onScan: <span class="subst">$&#123;qrcode&#125;</span>`</span>);</span><br><span class="line">    QrTerm.generate(qrcode);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'login'</span>, <span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`onLogin: <span class="subst">$&#123;user.name()&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'message'</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`from <span class="subst">$&#123;msg.from().name()&#125;</span> message: <span class="subst">$&#123;msg.text()&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">'logout'</span>, <span class="function"><span class="params">usr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`user <span class="subst">$&#123;user.name()&#125;</span> logout`</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>然后执行npm start，第一次会下载一些依赖，而且依赖很大，要等一段时间，如果实在下载不下来可能要全局FQ了，<br>可参考我另一篇<a href="http://syachiku.cn/2018/11/13/shadowsocks%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">使用proxifier全局代理</a></p><p>启动成功后会打印出登陆二维码<br><img src="/2019/05/05/基于Node.js搭建一个微信机器人/login-qrcode.png" title="登陆二维码示例"></p><p>扫码登陆，就可以侦听消息事件了</p><h3 id="接入图灵机器人实现聊天功能"><a href="#接入图灵机器人实现聊天功能" class="headerlink" title="接入图灵机器人实现聊天功能"></a>接入图灵机器人实现聊天功能</h3><p>上一步里的回调侦听事件测试ok了后，我们就可以做点实际功能了，实现自动聊天功能只需在<code>message</code>回调里操作就行。</p><p>编辑message回调方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">on(<span class="string">'message'</span>, <span class="keyword">async</span> (msg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (msg.self()) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> room = msg.room();</span><br><span class="line">  <span class="keyword">const</span> content = msg.text();</span><br><span class="line">  <span class="keyword">const</span> contact = msg.from();</span><br><span class="line">  <span class="keyword">let</span> reply;</span><br><span class="line">  <span class="keyword">if</span> (room) &#123;</span><br><span class="line">    <span class="comment">// 代表群消息</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 个人消息</span></span><br><span class="line">    reply = <span class="keyword">await</span> Service.reply(content);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`tuling reply: <span class="subst">$&#123;reply&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">await</span> contact.say(reply)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service.reply</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> reply(content) &#123;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.get(<span class="string">'http://www.tuling123.com/openapi/api'</span>, &#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">          <span class="comment">// key需要去http://www.tuling123.com申请</span></span><br><span class="line">          key: TULING_API_KEY,</span><br><span class="line">          info: content,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (data.code === <span class="number">100000</span>) &#123;</span><br><span class="line">        response = data.text;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(TULING_ERROR_MESSAGE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      response = e.message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios get</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">get</span>(url, params) &#123;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> axios.get(url, params);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'------------success-----------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;response.status&#125;</span>\n<span class="subst">$&#123;response.statusText&#125;</span>\n<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(response.data, <span class="literal">null</span>, <span class="number">2</span>)&#125;</span>\n`</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'------------error-------------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.error(e);</span><br><span class="line">      <span class="keyword">throw</span> e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加入这些逻辑，此时你的账号已经可以自动<del>聊骚</del>聊天啦</p><h3 id="接入每日简报，天气功能"><a href="#接入每日简报，天气功能" class="headerlink" title="接入每日简报，天气功能"></a>接入每日简报，天气功能</h3><p>每日自动播报功能就要用到schedule任务了，这里我们使用node-schedule库，在login的回调中执行定时功能<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import Schedule <span class="keyword">from</span> <span class="string">'node-schedule'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boy = Wechaty.instance(&#123; name: <span class="string">'wechat-boy'</span> &#125;);</span><br><span class="line">boy</span><br><span class="line">.<span class="keyword">on</span>(<span class="string">'login'</span>, (usr) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 设置定时任务, 每天凌晨8点触发，</span></span><br><span class="line">  <span class="comment">// 每分钟的第30秒： '30 * * * * *'</span></span><br><span class="line">  <span class="comment">// 每小时的1分30秒 ：'30 1 * * * *'</span></span><br><span class="line">  <span class="comment">// 每天的1点1分30秒 ：'30 1 1 * * *'</span></span><br><span class="line">  <span class="comment">// 每月的1日1点1分30秒 ：'30 1 1 1 * *'</span></span><br><span class="line">  <span class="comment">// 每周1的1点1分30秒 ：'30 1 1 * * 1'</span></span><br><span class="line">  <span class="comment">// 详情见node_schedule文档</span></span><br><span class="line">  Schedule.scheduleJob(<span class="string">'0 0 8 * * *'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 寻找备注名称为$&#123;alias&#125;的联系人</span></span><br><span class="line">    <span class="keyword">const</span> contact = <span class="keyword">await</span> boy.Contact.find(&#123; <span class="keyword">alias</span>: `$&#123;<span class="keyword">alias</span>&#125;` &#125;)</span><br><span class="line">    <span class="keyword">await</span> contact.say(<span class="keyword">await</span> Service.getNews());</span><br><span class="line">    <span class="keyword">await</span> contact.say(<span class="keyword">await</span> Service.getWeather());</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service.getNews</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> <span class="title">getNews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> msg;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'http://v.juhe.cn/toutiao/index'</span>, &#123;</span><br><span class="line">        <span class="keyword">params</span>: &#123;</span><br><span class="line">          <span class="comment">// 需要去https://www.juhe.cn/申请</span></span><br><span class="line">          key: NEWS_KEY,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      msg = Util.handleNewsData(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      console.error(e);</span><br><span class="line">      msg = <span class="string">'获取新闻失败'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service.getWeather</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> <span class="title">getWeather</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> msg;</span><br><span class="line">    <span class="keyword">let</span> response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">await</span> <span class="keyword">this</span>.<span class="keyword">get</span>(TIANQI_URL, &#123;</span><br><span class="line">        <span class="keyword">params</span>: &#123;</span><br><span class="line">          cityname: TIANQI_CITY,</span><br><span class="line">          <span class="comment">// 需要去https://www.juhe.cn/申请</span></span><br><span class="line">          key: TIANQI_KEY</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      msg = Util.handleWeatherData(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      console.error(e);</span><br><span class="line">      msg = <span class="string">'获取天气失败'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>一个简单的，拥有每日播报，自动聊天的微信机器人就实现了。</p><p>完整代码<a href="https://github.com/zjkhiyori/wechat-boy" target="_blank" rel="noopener">wechat-boy</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;将要实现的功能&quot;&gt;&lt;a href=&quot;#将要实现的功能&quot; class=&quot;headerlink&quot; title=&quot;将要实现的功能&quot;&gt;&lt;/a&gt;将要实现的功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自动聊天，可以把它扔群里跟大家&lt;del&gt;聊骚&lt;/del&gt;聊天&lt;/li&gt;
&lt;li&gt;每日简报，给同事家人定时播报头条简报&lt;/li&gt;
&lt;li&gt;每日天气预报，给你老婆&lt;del&gt;程序猿哪来的老婆&lt;/del&gt;嘘寒问暖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基本架构&quot;&gt;&lt;a href=&quot;#基本架构&quot; class=&quot;headerlink&quot; title=&quot;基本架构&quot;&gt;&lt;/a&gt;基本架构&lt;/h2&gt;&lt;p&gt;本项目基于&lt;a href=&quot;https://github.com/Chatie/wechaty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wechaty&lt;/a&gt;，这是一个封装了微信基本事件的开源库，比如&lt;code&gt;onLogin（登陆事件）&lt;/code&gt;，&lt;code&gt;onMessage（消息事件）&lt;/code&gt;，&lt;code&gt;onLogout（登出事件）&lt;/code&gt;等等，详细使用可参考该项目文档，&lt;br&gt;有了这些事件，我们可以基于Node.js很轻松的开发一些常用功能。&lt;/p&gt;
&lt;p&gt;本项目Node版本需要 &amp;gt;= 10，可以自行安装nvm进行版本切换。&lt;/p&gt;
&lt;p&gt;本项目工程代码&lt;a href=&quot;https://github.com/zjkhiyori/wechat-boy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wechat-boy&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Android免root获取shell级权限实现静默卸载安装</title>
    <link href="http://yoursite.com/2019/04/03/Android%E5%85%8Droot%E8%8E%B7%E5%8F%96shell%E7%BA%A7%E6%9D%83%E9%99%90%E5%AE%9E%E7%8E%B0%E9%9D%99%E9%BB%98%E5%8D%B8%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/04/03/Android免root获取shell级权限实现静默卸载安装/</id>
    <published>2019-04-03T04:16:20.000Z</published>
    <updated>2019-04-13T09:17:19.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案分析"><a href="#方案分析" class="headerlink" title="方案分析"></a>方案分析</h2><p>市面上实现这种方案最早的应用应该是”黑阈”，我们在使用的时候需要开启调试模式，然后通过adb或者注入器注入主服务，才可以使用后台管制以及其他高级权限的功能。所以本方案也是基于这种注入服务的方式，来实现各种需要高级权限的功能</p><h2 id="Shell级权限的服务"><a href="#Shell级权限的服务" class="headerlink" title="Shell级权限的服务"></a>Shell级权限的服务</h2><p>这种方案的关键点是这个拥有shell级权限的服务，Android提供了app_process指令供我们启动一个进程，我们可以通过该指令起一个Java服务，如果是通过shell执行的，该服务会从<code>/system/bin/sh</code> fork出来，并且拥有shell级权限</p><a id="more"></a><p>这里我写了一个service.dex服务来测试一下，并通过shell启动它<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先将service.dex push至Android设备</span></span><br><span class="line">adb push service<span class="selector-class">.dex</span> /data/local/tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后通过app_process启动，并指定一个名词</span></span><br><span class="line">adb shell nohup app_process -Djava<span class="selector-class">.class</span><span class="selector-class">.path</span>=/data/local/tmp/server<span class="selector-class">.dex</span> /system/bin --nice-name=club<span class="selector-class">.syachiku</span><span class="selector-class">.hackrootservice</span> shellService.Main</span><br></pre></td></tr></table></figure></p><p>然后再看看该服务的信息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列出所有正在运行的服务</span></span><br><span class="line">adb shell ps</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到服务名为club.syachiku.hackrootservice的服务</span></span><br><span class="line">shell     <span class="number">24154</span> <span class="number">1</span>     <span class="number">777484</span> <span class="number">26960</span> ffffffff b6e7284c S club.syachiku.hackrootservice</span><br></pre></td></tr></table></figure></p><p>可以看到该服务pid为24154，ppid为1，也说明该服务是从<code>/system/bin/sh</code> fork出来的<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看该服务具体信息</span></span><br><span class="line">adb shell cat <span class="meta-keyword">/proc/</span><span class="number">24154</span>/status</span><br><span class="line"></span><br><span class="line"><span class="symbol">Name:</span>main</span><br><span class="line"><span class="symbol">State:</span>S (sleeping)</span><br><span class="line"><span class="symbol">Tgid:</span><span class="number">24154</span></span><br><span class="line"><span class="symbol">Pid:</span><span class="number">24154</span></span><br><span class="line"><span class="symbol">PPid:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">TracerPid:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">Uid:</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span></span><br><span class="line"><span class="symbol">Gid:</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span></span><br><span class="line"><span class="symbol">FDSize:</span><span class="number">32</span></span><br><span class="line"><span class="symbol">Groups:</span><span class="number">1004</span> <span class="number">1007</span> <span class="number">1011</span> <span class="number">1015</span> <span class="number">1028</span> <span class="number">3001</span> <span class="number">3002</span> <span class="number">3003</span> <span class="number">3006</span></span><br><span class="line"><span class="symbol">VmPeak:</span>  <span class="number">777484</span> kB</span><br><span class="line"><span class="symbol">VmSize:</span>  <span class="number">777484</span> kB</span><br><span class="line"><span class="symbol">VmLck:</span>       <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">VmPin:</span>       <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">VmHWM:</span>   <span class="number">26960</span> kB</span><br><span class="line"><span class="symbol">VmRSS:</span>   <span class="number">26960</span> kB</span><br><span class="line"><span class="symbol">VmData:</span>   <span class="number">11680</span> kB</span><br><span class="line"><span class="symbol">VmStk:</span>    <span class="number">8192</span> kB</span><br><span class="line"><span class="symbol">VmExe:</span>      <span class="number">12</span> kB</span><br><span class="line"><span class="symbol">VmLib:</span>   <span class="number">52812</span> kB</span><br><span class="line"><span class="symbol">VmPTE:</span>     <span class="number">134</span> kB</span><br><span class="line"><span class="symbol">VmSwap:</span>       <span class="number">0</span> kB</span><br><span class="line"><span class="symbol">Threads:</span><span class="number">13</span></span><br><span class="line"><span class="symbol">SigQ:</span><span class="number">0</span>/<span class="number">6947</span></span><br><span class="line"><span class="symbol">SigPnd:</span><span class="number">0000000000000000</span></span><br><span class="line"><span class="symbol">ShdPnd:</span><span class="number">0000000000000000</span></span><br><span class="line"><span class="symbol">SigBlk:</span><span class="number">0000000000001204</span></span><br><span class="line"><span class="symbol">SigIgn:</span><span class="number">0000000000000001</span></span><br><span class="line"><span class="symbol">SigCgt:</span><span class="number">00000002000094f</span>8</span><br><span class="line"><span class="symbol">CapInh:</span><span class="number">0000000000000000</span></span><br><span class="line"><span class="symbol">CapPrm:</span><span class="number">0000000000000000</span></span><br><span class="line"><span class="symbol">CapEff:</span><span class="number">0000000000000000</span></span><br><span class="line"><span class="symbol">CapBnd:</span><span class="number">00000000000000</span>c0</span><br><span class="line"><span class="symbol">Seccomp:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">Cpus_allowed:</span>f</span><br><span class="line"><span class="symbol">Cpus_allowed_list:</span><span class="number">0</span><span class="number">-3</span></span><br><span class="line"><span class="symbol">voluntary_ctxt_switches:</span><span class="number">18</span></span><br><span class="line"><span class="symbol">nonvoluntary_ctxt_switches:</span><span class="number">76</span></span><br></pre></td></tr></table></figure></p><p>可以看到Uid，Gid为2000，就是shell的Uid</p><h2 id="开始吧-本方案也需开启调试模式"><a href="#开始吧-本方案也需开启调试模式" class="headerlink" title="开始吧(本方案也需开启调试模式)"></a>开始吧(本方案也需开启调试模式)</h2><p>分析了app_process的可行性，我们可以给出一个方案，通过app_process启动一个socket服务，然后让我们的App与该服务通信，来代理App做一些<del>见不得人</del>需要shell级权限的事情，比如静默卸载，安装，全局广播等等</p><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>这里我们新建一个名为hack-root的工程</p><h3 id="编写socket服务"><a href="#编写socket服务" class="headerlink" title="编写socket服务"></a>编写socket服务</h3><p>然后在代码目录下新建一个shellService包，新建一个Main入口类，我们先输出一些测试代码，来测试是否执行成功</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"*****************hack server starting****************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先执行./gradlew buildDebug打包，然后.apk改成.rar解压出classes.dex文件，然后将该文件push至你的Android设备比如/sdcard/</li><li><p>然后使用app_process指令执行该服务</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell app_process -Djava<span class="selector-class">.class</span><span class="selector-class">.path</span>=/sdcard/classes<span class="selector-class">.dex</span> /system/bin shellService.Main</span><br></pre></td></tr></table></figure></li><li><p>如果控制台输出<code>Abort</code>应该是一些基本的路径问题，稍作仔细检查一下，成功执行后会看到我们的打印的日志</p></li></ul><p>运行测试没问题了就开写socket服务吧<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用looper让线程循环</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line">        System.out.println(<span class="string">"*****************hack server starting****************"</span>);</span><br><span class="line">        <span class="comment">// 开一个子线程启动服务</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> SocketService(<span class="keyword">new</span> SocketService.SocketListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="function">String <span class="title">onMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 接收客户端传过来的消息</span></span><br><span class="line">                        <span class="function"><span class="keyword">return</span> <span class="title">resolveMsg</span><span class="params">(msg)</span></span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function">String <span class="title">resolveMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行客户端传过来的消息并返回执行结果</span></span><br><span class="line">        ShellUtil.ExecResult execResult =</span><br><span class="line">                ShellUtil.execute(<span class="string">"pm uninstall "</span> + msg);</span><br><span class="line">        <span class="function"><span class="keyword">return</span> execResult.<span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SocketServer<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class SocketService &#123;</span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">int</span> PORT = <span class="number">10500</span>;</span><br><span class="line">    <span class="keyword">private</span> SocketListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SocketService(SocketListener listener) &#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">        <span class="built_in">try</span> &#123;</span><br><span class="line">            <span class="comment">// 利用ServerSocket类启动服务，然后指定一个端口</span></span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"server running "</span> + PORT + <span class="string">" port"</span>);</span><br><span class="line">            ArrayBlockingQueue&lt;Runnable&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 新建一个线程池用来并发处理客户端的消息</span></span><br><span class="line">            ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                    <span class="number">5</span>,</span><br><span class="line">                    <span class="number">10</span>,</span><br><span class="line">                    <span class="number">5000</span>,</span><br><span class="line">                    TimeUnit.MILLISECONDS,</span><br><span class="line">                    queue</span><br><span class="line">                    );</span><br><span class="line">            <span class="built_in">while</span> (true) &#123;</span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">// 接收到新消息</span></span><br><span class="line">                executor.execute(<span class="keyword">new</span> processMsg(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"SocketServer create Exception:"</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class processMsg implements Runnable &#123;</span><br><span class="line">        Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> processMsg(Socket s) &#123;</span><br><span class="line">            socket = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">            <span class="built_in">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过流读取内容</span></span><br><span class="line">                BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">line</span> = bufferedReader.readLine();</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"server receive: "</span> + <span class="built_in">line</span>);</span><br><span class="line">                PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">                <span class="keyword">String</span> repeat = listener.onMessage(<span class="built_in">line</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"server send: "</span> + repeat);</span><br><span class="line">                <span class="comment">// 服务端返回给客户端的消息</span></span><br><span class="line">                printWriter.<span class="built_in">print</span>(repeat);</span><br><span class="line">                printWriter.<span class="built_in">flush</span>();</span><br><span class="line">                printWriter.<span class="built_in">close</span>();</span><br><span class="line">                bufferedReader.<span class="built_in">close</span>();</span><br><span class="line">                socket.<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"socket connection error："</span> + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> interface SocketListener&#123;</span><br><span class="line">        <span class="comment">// 通话消息回调</span></span><br><span class="line">        <span class="keyword">String</span> onMessage(<span class="keyword">String</span> <span class="built_in">text</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ShellUtil</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class ShellUtil &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> COMMAND_LINE_END = <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> COMMAND_EXIT = <span class="string">"exit\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单条指令</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecResult execute(<span class="keyword">String</span> command) &#123;</span><br><span class="line">        <span class="keyword">return</span> execute(<span class="keyword">new</span> <span class="keyword">String</span>[] &#123;command&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多条指令重载方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecResult execute(<span class="keyword">String</span>[] commands) &#123;</span><br><span class="line">        <span class="keyword">if</span> (commands == <span class="keyword">null</span> || commands.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExecResult(<span class="keyword">false</span>, <span class="string">"empty command"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">-1</span>;</span><br><span class="line">        Process process = <span class="keyword">null</span>;</span><br><span class="line">        DataOutputStream dataOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">BufferedReader</span> sucResult = <span class="keyword">null</span>, errResult = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sucMsg = <span class="keyword">null</span>, errMsg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取shell级别的process</span></span><br><span class="line">            process = Runtime.getRuntime().exec(<span class="string">"sh"</span>);</span><br><span class="line">            dataOutputStream = <span class="keyword">new</span> DataOutputStream(process.getOutputStream());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> command : commands) &#123;</span><br><span class="line">                <span class="keyword">if</span> (command == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"execute command: "</span> + command);</span><br><span class="line">                <span class="comment">// 执行指令</span></span><br><span class="line">                dataOutputStream.write(command.getBytes());</span><br><span class="line">                dataOutputStream.writeBytes(COMMAND_LINE_END);</span><br><span class="line">                <span class="comment">// 刷新</span></span><br><span class="line">                dataOutputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            dataOutputStream.writeBytes(COMMAND_EXIT);</span><br><span class="line">            dataOutputStream.flush();</span><br><span class="line">            result = process.waitFor();</span><br><span class="line">            sucMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            errMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sucResult = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">            errResult = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line">            <span class="keyword">String</span> s;</span><br><span class="line">            <span class="keyword">while</span> ((s = sucResult.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sucMsg.<span class="built_in">append</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ((s = errResult.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                errMsg.<span class="built_in">append</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 关闭资源，防止内存泄漏</span></span><br><span class="line">                <span class="keyword">assert</span> dataOutputStream != <span class="keyword">null</span>;</span><br><span class="line">                dataOutputStream.close();</span><br><span class="line">                <span class="keyword">assert</span> sucResult != <span class="keyword">null</span>;</span><br><span class="line">                sucResult.close();</span><br><span class="line">                <span class="keyword">assert</span> errResult != <span class="keyword">null</span>;</span><br><span class="line">                errResult.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            process.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        ExecResult execResult;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">            execResult = <span class="keyword">new</span> ExecResult(<span class="keyword">true</span>, sucMsg.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            execResult = <span class="keyword">new</span> ExecResult(<span class="keyword">false</span>, errMsg.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回执行结果</span></span><br><span class="line">        <span class="keyword">return</span> execResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> class ExecResult &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">boolean</span> success;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ExecResult(<span class="built_in">boolean</span> success, <span class="keyword">String</span> message) &#123;</span><br><span class="line">            <span class="keyword">this</span>.success = success;</span><br><span class="line">            <span class="keyword">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> getSuccess() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.success;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">String</span> getMessage() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简易的socket服务就搭建好了，可以用来接收客户端传过来的指令并且执行然后返回结果</p><h3 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h3><p>首先编写一个socketClient</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class SocketClient &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">"HackRoot SocketClient"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">int</span> PORT = <span class="number">10500</span>;</span><br><span class="line">    <span class="keyword">private</span> SocketListener listener;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter printWriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SocketClient(<span class="keyword">final</span> <span class="keyword">String</span> cmd, SocketListener listener) &#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 与hackserver建立连接</span></span><br><span class="line">                    socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, PORT), <span class="number">3000</span>);</span><br><span class="line">                    socket.setSoTimeout(<span class="number">3000</span>);</span><br><span class="line">                    printWriter = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">                    Log.d(TAG, <span class="string">"client send: "</span> + cmd);</span><br><span class="line">                    <span class="comment">// 发送指令</span></span><br><span class="line">                    printWriter.<span class="built_in">println</span>(cmd);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    <span class="comment">// 读取服务端返回</span></span><br><span class="line">                    readServerData(socket);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"client send fail: "</span> + e.getMessage());</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readServerData(<span class="keyword">final</span> Socket socket) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader ipsReader = <span class="keyword">new</span> InputStreamReader(socket.getInputStream());</span><br><span class="line">            <span class="keyword">BufferedReader</span> bfReader = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(ipsReader);</span><br><span class="line">            <span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((<span class="built_in">line</span> = bfReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"client receive: "</span> + <span class="built_in">line</span>);</span><br><span class="line">                listener.onMessage(<span class="built_in">line</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            ipsReader.close();</span><br><span class="line">            bfReader.close();</span><br><span class="line">            printWriter.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface SocketListener &#123;</span><br><span class="line">        <span class="keyword">void</span> onMessage(<span class="keyword">String</span> msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后UI组件相关的事件，我们暂时只实现一个静默卸载App的功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> ScrollView scrollView;</span><br><span class="line">    <span class="keyword">private</span> EditText uninsTxtInput;</span><br><span class="line">    <span class="keyword">private</span> Button btnUnins;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        btnUnins = findViewById(R.id.btn_uninstall);</span><br><span class="line">        uninsTxtInput = findViewById(R.id.pkg_input);</span><br><span class="line">        textView = findViewById(R.id.tv_output);</span><br><span class="line">        scrollView = findViewById(R.id.text_container);</span><br><span class="line">        btnUnins.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                sendMessage(uninsTxtInput.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SocketClient(msg, <span class="keyword">new</span> SocketClient.SocketListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">                showOnTextView(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showOnTextView</span><span class="params">(<span class="keyword">final</span> String msg)</span> </span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                String baseText = textView.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (baseText != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    textView.setText(baseText + <span class="string">"\n"</span> + msg);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    textView.setText(msg);</span><br><span class="line">                &#125;</span><br><span class="line">                scrollView.smoothScrollTo(<span class="number">0</span>, scrollView.getHeight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>布局代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/pkg_input"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"input package name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/btn_uninstall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_uninstall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"uninstall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/pkg_input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_output"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码相关的工作基本完工，一个简单的，实现了静默卸载Demo就完成了</p><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><ul><li>./gradlew assembleRelease 打出apk</li><li>后缀改成.rar解压出classes.dex</li><li>将classes.dex push至<code>/data/local/tmp/</code></li><li><p>执行服务</p><ul><li><p>前台执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拔掉数据线会终止服务</span></span><br><span class="line">adb shell app_process -Djava<span class="selector-class">.class</span><span class="selector-class">.path</span>=/data/local/tmp/classes<span class="selector-class">.dex</span> /system/bin shellService.Main</span><br></pre></td></tr></table></figure></li><li><p>后台执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 会一直运行除非手动<span class="keyword">kill</span> pid或者重启设备</span><br><span class="line">adb shell nohup app_process -Djava.class.path=/<span class="keyword">data</span>/<span class="keyword">local</span>/tmp/classes.dex /<span class="keyword">system</span>/<span class="keyword">bin</span> <span class="comment">--nice-name=$&#123;serviceName&#125; shellService.Main</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装apk，输入要卸载的包名，点击UNINSTALL进行静默卸载</p></li></ul><h2 id="完整项目"><a href="#完整项目" class="headerlink" title="完整项目"></a>完整项目</h2><p><a href="https://github.com/zjkhiyori/hack-root" target="_blank" rel="noopener">https://github.com/zjkhiyori/hack-root</a> 欢迎fork || star</p><img src="/2019/04/03/Android免root获取shell级权限实现静默卸载安装/example.gif" title="example"><h2 id="技术参考"><a href="#技术参考" class="headerlink" title="技术参考"></a>技术参考</h2><p>感谢下列开源作者</p><p><a href="https://github.com/Trinea/android-common" target="_blank" rel="noopener">android-common</a></p><p><a href="https://github.com/Zane96/Fairy" target="_blank" rel="noopener">Fairy</a></p><p><a href="https://github.com/gtf35/app_process-shell-use" target="_blank" rel="noopener">app_process-shell-use</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方案分析&quot;&gt;&lt;a href=&quot;#方案分析&quot; class=&quot;headerlink&quot; title=&quot;方案分析&quot;&gt;&lt;/a&gt;方案分析&lt;/h2&gt;&lt;p&gt;市面上实现这种方案最早的应用应该是”黑阈”，我们在使用的时候需要开启调试模式，然后通过adb或者注入器注入主服务，才可以使用后台管制以及其他高级权限的功能。所以本方案也是基于这种注入服务的方式，来实现各种需要高级权限的功能&lt;/p&gt;
&lt;h2 id=&quot;Shell级权限的服务&quot;&gt;&lt;a href=&quot;#Shell级权限的服务&quot; class=&quot;headerlink&quot; title=&quot;Shell级权限的服务&quot;&gt;&lt;/a&gt;Shell级权限的服务&lt;/h2&gt;&lt;p&gt;这种方案的关键点是这个拥有shell级权限的服务，Android提供了app_process指令供我们启动一个进程，我们可以通过该指令起一个Java服务，如果是通过shell执行的，该服务会从&lt;code&gt;/system/bin/sh&lt;/code&gt; fork出来，并且拥有shell级权限&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一个NodeJS生成excel表格的小demo</title>
    <link href="http://yoursite.com/2018/12/14/%E4%B8%80%E4%B8%AANodeJS%E7%94%9F%E6%88%90excel%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%B0%8Fdemo/"/>
    <id>http://yoursite.com/2018/12/14/一个NodeJS生成excel表格的小demo/</id>
    <published>2018-12-14T03:52:35.000Z</published>
    <updated>2019-03-28T13:06:27.566Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/14/一个NodeJS生成excel表格的小demo/title_background.png" title="Fuck产品经理"><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>已经2018年了，广大人民群众基本都用上es6了，所以这里也配一下es6的环境</p><p>新建工程，创建一个package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"projectName"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"devDependencies"</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">"dependencies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>node版本建议不要太低，低版本对es6的兼容性不好，我这里使用的是8.9.0</p><p>然后安装babel<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">yarn</span> <span class="keyword">add </span><span class="keyword">babel-cli</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">// </span>老版本<span class="keyword">babel-preset-2015已经废弃</span></span><br><span class="line"><span class="keyword">yarn </span><span class="keyword">add </span><span class="keyword">babel-preset-env</span></span><br></pre></td></tr></table></figure></p><p>然后再写几句es6测试一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个诗人类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poet</span> </span>&#123;</span><br><span class="line">  poem(...poemText) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(poemText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">epxort <span class="keyword">default</span> Poet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个Test.js类</span></span><br><span class="line"><span class="keyword">import</span> Poet <span class="keyword">from</span> <span class="string">'./Poet'</span>;</span><br><span class="line"><span class="keyword">let</span> poet = <span class="keyword">new</span> Poet();</span><br><span class="line">poet.poem(<span class="string">'苟'</span>, <span class="string">'岂'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后用babel node指令跑一下Test.js</span></span><br><span class="line">babel-node Test.js</span><br><span class="line"><span class="comment">// [ '苟', '岂' ]</span></span><br><span class="line"><span class="comment">// 成功念出我想念的诗</span></span><br></pre></td></tr></table></figure></p><p>es6环境就ok了</p><h2 id="生成excel"><a href="#生成excel" class="headerlink" title="生成excel"></a>生成excel</h2><p>我这里用的是一个随便找的库<a href="https://github.com/functionscope/Node-Excel-Export" target="_blank" rel="noopener">excel-export</a>，这个库的issue已经有人在喊”This project is DEAD!!!”</p><p>无视他继续安装<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">yarn</span> <span class="keyword">add </span>excel-<span class="meta">export</span></span><br></pre></td></tr></table></figure></p><p>使用方法我这里也只是简单用一下基本功能，高级用法还是直接看该库的文档</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">conf</span> = &#123;&#125;;</span><br><span class="line"><span class="comment">// 定义sheet名称</span></span><br><span class="line"><span class="keyword">conf</span>.name = <span class="string">"DBData"</span>;</span><br><span class="line"><span class="comment">// 定义列的名称以及数据类型</span></span><br><span class="line"><span class="keyword">conf</span>.cols = [&#123;</span><br><span class="line">  caption:'Name',</span><br><span class="line">  <span class="keyword">type</span>:'string'</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  caption:'<span class="keyword">Type</span>',</span><br><span class="line">  <span class="keyword">type</span>:'string'</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义row的数据</span></span><br><span class="line"><span class="keyword">conf</span>.rows = ['Tom', <span class="string">"String"</span>];</span><br><span class="line"><span class="comment">// execute方法生成文件源数据</span></span><br><span class="line"><span class="keyword">const</span> result = nodeExcel.execute(<span class="keyword">conf</span>);</span><br><span class="line"><span class="comment">// fs将文件写到内存</span></span><br><span class="line">fs.writeFile(`<span class="variable">$&#123;__dirname&#125;</span>/<span class="keyword">test</span>.xlsx`, result, 'binary', (<span class="keyword">err</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">err</span> ? console.<span class="built_in">log</span>(<span class="keyword">err</span>) : null;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Demo的代码地址<a href="https://github.com/zjkhiyori/ExcelGenerator" target="_blank" rel="noopener">ExcelGenerator</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/12/14/一个NodeJS生成excel表格的小demo/title_background.png&quot; title=&quot;Fuck产品经理&quot;&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;已经2018年了，广大人民群众基本都用上es6了，所以这里也配一下es6的环境&lt;/p&gt;
&lt;p&gt;新建工程，创建一个package.json&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;projectName&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks服务搭建以及全局代理</title>
    <link href="http://yoursite.com/2018/11/13/shadowsocks%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/13/shadowsocks服务搭建以及全局代理/</id>
    <published>2018-11-13T07:40:10.000Z</published>
    <updated>2019-03-28T13:06:27.558Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/11/13/shadowsocks服务搭建以及全局代理/title.jpeg"><p>最近又有一台服务器被GFW给干掉了，又得掏腰包买服务器跟搭建环境了，这次记录一下方便以后翻出来看吧</p><a id="more"></a><p>项目地址: <a href="https://github.com/shadowsocks/shadowsocks/tree/rm" target="_blank" rel="noopener">shadowsocks</a>（可以看到打开是个空项目，分支切换到master就可以看到原始项目了，据说是作者被请喝茶才出此下策？这些人这么好忽悠的吗？）</p><p>因为本人对科学上网有一定需求，公司邮箱也用Gmail，手机也用google全家桶，所以一般都会配备至少两台服务器，如果跟我一样有需求的，建议也至少配备两台</p><p>关于服务器购买就不多说了，我用的是这个<a href="https://www.alpharacks.com" target="_blank" rel="noopener">Aplpharacks</a>，一台VPS 512m或者256m内存的完全够用，我有一台早期买的128m的，大部分时间速度比其他几台要快，可能是哥伦比亚机房的原因？不过现在已经没得卖了，现在主要卖的都是洛杉矶机房，稳定性一般，网络好峰值可达4m/s，网络差的时候基本瘫痪</p><ul><li>优点：便宜，因为偶尔可能会中奖ip被GFW封，所以买个便宜的封了也不心疼</li><li>缺点：不稳定</li></ul><h3 id="服务搭建及部署"><a href="#服务搭建及部署" class="headerlink" title="服务搭建及部署"></a>服务搭建及部署</h3><p>搭建过程很简单，首先下载基础包跟python包管理器</p><p>我一般都是用Ubuntu，这里以Ubuntu为例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">// 如果有 E: Unable <span class="keyword">to</span> <span class="keyword">locate</span> <span class="keyword">package</span> python-pip 错误</span><br><span class="line">// 执行一下 sudo apt-<span class="keyword">get</span> <span class="keyword">update</span> 再<span class="keyword">install</span></span><br><span class="line"></span><br><span class="line">// 安装git</span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> git</span><br><span class="line"></span><br><span class="line">// 安装ss基础包</span><br><span class="line">pip <span class="keyword">install</span> git+https://github.com/shadowsocks/shadowsocks.git@<span class="keyword">master</span></span><br></pre></td></tr></table></figure></p><p>安装好了键入<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssserver -h</span></span><br></pre></td></tr></table></figure></p><p>有相应指令帮助提示就表面基础包已经ok</p><p>然后就是编辑配置信息<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个json配置文件</span></span><br><span class="line">touch ~/shadowsocks.json</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后编辑</span></span><br><span class="line">vim ~/shadowsocks.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 你的服务器ip</span></span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"*.*.*.*"</span>,</span><br><span class="line">    <span class="comment">// 配置多个端口及密码，</span></span><br><span class="line">    <span class="string">"port_password"</span>: &#123;</span><br><span class="line">        <span class="string">"8080"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"8081"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"8082"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"8083"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"8084"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"8085"</span>: <span class="string">"hello"</span>,</span><br><span class="line">        <span class="string">"443"</span>: <span class="string">"hello"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 单个端口配置</span></span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"hello"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="string">"timeout"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"rc4-md5"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里强烈建议多开几个端口备用，因为使用中发现GFW会对端口进行干扰，如果只配置了一个端口，被干扰后整台服务器无法使用，所以多开几个端口备用，一个端口失效了换其他端口试试</p><p>弄完配置文件就可以部署服务了</p><p>执行指令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前台启动方式</span><br><span class="line">ssserver -c ~/shadowsocks.json</span><br><span class="line">后台启动方式</span><br><span class="line">ssserver -c ~/shadowsocks<span class="selector-class">.json</span> -d start</span><br></pre></td></tr></table></figure></p><p>执行完后可以看看端口使用情况<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -tunpl</span></span><br></pre></td></tr></table></figure></p><p>可以看到刚才配置的端口使用情况，能看到刚才配置的端口就表明部署ok了，剩下就是客户端的事情了</p><p>客户端建议下载<a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">ShadowsocksX-NG</a></p><p>客户端配置好应该就能上网了，注意加密方式与服务端保持一致</p><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><p>因为chrome支持http转socks5协议，而终端不支持，所以终端无法走socks5协议，此时我们就需要一个全局代理，我用的是Proxifier，价格40刀，软件卖的比较贵，有条件的同学还请支持正版，网上也有很多破解资源</p><p>打开代理配置，增加一条配置<br></p><p>这里填入你shadowsocksX-NG的本地监听地址以及端口<br><img src="/2018/11/13/shadowsocks服务搭建以及全局代理/proxy_setting.png" title="Proxifier配置"><br><img src="/2018/11/13/shadowsocks服务搭建以及全局代理/shadowsock_setting.jpg" title="shadowsocksX-NG本地socks5"><br>然后打开rules，default设置为下图<br><img src="/2018/11/13/shadowsocks服务搭建以及全局代理/proxifier_rules_setting.png" title="rules设置"><br>然后回Proxifier首页将应用设置为gobal（默认为NONE）</p><p>此时connection栏目就能监控到你的网络请求，控制台也能科学上网了</p><p>然后我就可以登录我可怜的，才用了几个月的，被封禁的服务器了TAT。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/11/13/shadowsocks服务搭建以及全局代理/title.jpeg&quot;&gt;
&lt;p&gt;最近又有一台服务器被GFW给干掉了，又得掏腰包买服务器跟搭建环境了，这次记录一下方便以后翻出来看吧&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="extra" scheme="http://yoursite.com/tags/extra/"/>
    
  </entry>
  
  <entry>
    <title>手撸排序：快速排序</title>
    <link href="http://yoursite.com/2018/10/25/%E6%89%8B%E6%92%B8%E6%8E%92%E5%BA%8F%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/10/25/手撸排序：快速排序/</id>
    <published>2018-10-25T07:27:36.000Z</published>
    <updated>2019-03-28T13:06:27.580Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/25/手撸排序：快速排序/homura.jpg" title="沉迷猴姆拉无法自拔"><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>首先算法理解了主要思想，那么代码实现也是信手拈来</p><p>快排分以下三步：<br><a id="more"></a></p><ul><li>找基准：挑一个基准数用来分割当前数组，我们称该数为”基准”(pivot)</li><li>分割：把数组里小于”基准”的数放到左边，遍历一遍操作后数组就分割好了，最麻烦的也是这步分割操作了</li><li>递归：对分割后的数组重复第一二步，直到最后数组长度为1或0，就代表已经排好可以返回了</li></ul><img src="/2018/10/25/手撸排序：快速排序/sorting_quicksort_anim.gif" title="算法示意图（图源维基百科）"><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>首先我们用lodash创建一个随机数组<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.shuffle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment">//  [2, 3, 4, 1, 7, 5, 8, 10, 9, 6 ]</span></span><br></pre></td></tr></table></figure></p><p>现在将它进行排序</p><p>首先选取基准数，我们就直接取最后一位作为基准数，左起设一个index值记录替换次数，每替换一次index自增1</p><p>然后从左至右开始遍历<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &gt; 2替换下标为0，0的两个数，index自增1，</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &gt; 3替换下标为1，1的两个数，index自增1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &gt; 4替换下标为2，2的两个数，index自增1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &gt; 1替换下标为3，3的两个数，index自增1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &lt; 7不替换，index为4不变</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &gt; 5替换下标为4, 5的两个数，index自增1</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &lt; 8不替换，index为5不变</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &lt; 10不替换，index为5不变</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">// 6 &lt; 9不替换，index为5不变</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">7</span> ]</span><br><span class="line"><span class="comment">// 遍历结束替换pivot与index下标的值，这样就分割出了两个数组</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">// 然后再分别将这两个数组进行重复上述操作</span></span><br></pre></td></tr></table></figure></p><p>有了上述思路就可以开始撸代码了<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义交换逻辑</span></span><br><span class="line">function <span class="built_in">swap</span>(arr, i, j) &#123;</span><br><span class="line">  const temp = arr[i];</span><br><span class="line">  arr[i] = arr[j];</span><br><span class="line">  arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义分割逻辑</span></span><br><span class="line">function <span class="built_in">partition</span>(arr, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</span><br><span class="line">  const pivot = arr[<span class="keyword">right</span>];</span><br><span class="line">  <span class="keyword">let</span> index = <span class="keyword">left</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">left</span>; i &lt; <span class="keyword">right</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pivot &gt; arr[i]) &#123;</span><br><span class="line">      <span class="built_in">swap</span>(arr, i, index);</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">swap</span>(arr, <span class="keyword">right</span>, index);</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="built_in">sort</span>(arr, <span class="keyword">left</span>, <span class="keyword">right</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">left</span> &gt; <span class="keyword">right</span>) <span class="keyword">return</span>;</span><br><span class="line">  const index = <span class="built_in">partition</span>(arr, <span class="keyword">left</span>, <span class="keyword">right</span>);</span><br><span class="line">  <span class="built_in">sort</span>(arr, <span class="keyword">left</span>, index - <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sort</span>(arr, index + <span class="number">1</span>, <span class="keyword">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function quick_sort(arr) &#123;</span><br><span class="line">  <span class="built_in">sort</span>(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码可能较其他方法冗余，个人认为这是思路最清晰的写法</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>然后加一些测试代码<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const _ = require('lodash');</span><br><span class="line">const arr = _.shuffle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]);</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(quick_sort(arr));</span><br><span class="line"><span class="comment">// [ 8, 3, 9, 4, 7, 1, 6, 2, 5, 10 ]</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 2, 8, 4, 3, 9, 5, 1, 10, 6, 7 ]</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 10, 7, 8, 4, 6, 1, 2, 9, 3, 5 ]</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure></p><p>测试ok</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/10/25/手撸排序：快速排序/homura.jpg&quot; title=&quot;沉迷猴姆拉无法自拔&quot;&gt;
&lt;h2 id=&quot;核心思想&quot;&gt;&lt;a href=&quot;#核心思想&quot; class=&quot;headerlink&quot; title=&quot;核心思想&quot;&gt;&lt;/a&gt;核心思想&lt;/h2&gt;&lt;p&gt;首先算法理解了主要思想，那么代码实现也是信手拈来&lt;/p&gt;
&lt;p&gt;快排分以下三步：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>关于Android提取、备份APK</title>
    <link href="http://yoursite.com/2018/07/10/%E5%85%B3%E4%BA%8EAndroid%E6%8F%90%E5%8F%96%E3%80%81%E5%A4%87%E4%BB%BDAPK/"/>
    <id>http://yoursite.com/2018/07/10/关于Android提取、备份APK/</id>
    <published>2018-07-10T07:04:22.000Z</published>
    <updated>2019-03-28T13:06:27.574Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/07/10/关于Android提取、备份APK/title_background.jpeg" title="real fragrant warning"><h2 id="通过adb提取APK"><a href="#通过adb提取APK" class="headerlink" title="通过adb提取APK"></a>通过adb提取APK</h2><p>Android提取apk有两种途径，一种是通过adb<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列出所有安装包</span></span><br><span class="line">adb <span class="keyword">shell</span> pm <span class="keyword">list</span> package</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到你需要提取的包名，然后获取路径</span></span><br><span class="line">adb <span class="keyword">shell</span> pm path packageName</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出路径后拷贝或者pull到你的电脑</span></span><br><span class="line">adb pull apkPath ~/Download</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某些设备可能需要root权限才能访问这个path路径</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>另一种方法就是通过编写App进行提取/备份apk</p><h2 id="通过编写App提取-备份APK"><a href="#通过编写App提取-备份APK" class="headerlink" title="通过编写App提取/备份APK"></a>通过编写App提取/备份APK</h2><p>这种方法主要通过<code>packageManager</code>来获取系统的所有应用信息<code>packageInfo</code>，里面包含了应用路径，包名，应用名等信息，然后根据路径进行拷贝以及备份</p><h2 id="ApkExtractor工具"><a href="#ApkExtractor工具" class="headerlink" title="ApkExtractor工具"></a>ApkExtractor工具</h2><p>个人通过闲暇时间写的一个apk提取工具，使用React Native构建，数据框架使用Mobx，欢迎下载体验</p><p>项目地址：<a href="https://github.com/zjkhiyori/ApkExtractorRN" target="_blank" rel="noopener">https://github.com/zjkhiyori/ApkExtractorRN</a><br><img src="/2018/07/10/关于Android提取、备份APK/demo.gif" title="预览图"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/07/10/关于Android提取、备份APK/title_background.jpeg&quot; title=&quot;real fragrant warning&quot;&gt;
&lt;h2 id=&quot;通过adb提取APK&quot;&gt;&lt;a href=&quot;#通过adb提取APK&quot; class=&quot;headerlink&quot; title=&quot;通过adb提取APK&quot;&gt;&lt;/a&gt;通过adb提取APK&lt;/h2&gt;&lt;p&gt;Android提取apk有两种途径，一种是通过adb&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 列出所有安装包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb &lt;span class=&quot;keyword&quot;&gt;shell&lt;/span&gt; pm &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt; package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 找到你需要提取的包名，然后获取路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb &lt;span class=&quot;keyword&quot;&gt;shell&lt;/span&gt; pm path packageName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出路径后拷贝或者pull到你的电脑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb pull apkPath ~/Download&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 某些设备可能需要root权限才能访问这个path路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native for Android 源码解析：Reload, Debug JS Remotely具体做了什么？</title>
    <link href="http://yoursite.com/2018/05/15/React%20Native%20for%20Android%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9AReload,%20Debug%20JS%20Remotely%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/05/15/React Native for Android 源码解析：Reload, Debug JS Remotely做了什么？/</id>
    <published>2018-05-15T10:54:54.000Z</published>
    <updated>2019-03-28T13:06:27.556Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/05/15/React%20Native%20for%20Android%20源码解析：Reload,%20Debug%20JS%20Remotely做了什么？/title_background.jpeg" title="忽悠妹纸买的splatoon不会玩然后甩给我了，美滋滋"><h2 id="Reload-debug-js-remotely罪恶滔天，弄的百姓怨声载道"><a href="#Reload-debug-js-remotely罪恶滔天，弄的百姓怨声载道" class="headerlink" title="Reload, debug js remotely罪恶滔天，弄的百姓怨声载道"></a>Reload, debug js remotely罪恶滔天，弄的百姓怨声载道</h2><p>最近使用0.54.0版本开发有个调试的bug非常恶心，debug js remotely总是抛<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DeltaPatcher<span class="selector-class">.js</span>:<span class="number">58</span> Uncaught (<span class="keyword">in</span> promise) Error: DeltaPatcher should receive <span class="selector-tag">a</span> fresh Delta when being initialized</span><br><span class="line">                                                       at DeltaPatcher<span class="selector-class">.applyDelta</span> (DeltaPatcher<span class="selector-class">.js</span>:<span class="number">58</span>)</span><br><span class="line">                                                       at deltaUrlToBlobUrl (deltaUrlToBlobUrl<span class="selector-class">.js</span>:<span class="number">34</span>)</span><br><span class="line">                                                       at &lt;anonymous&gt;</span><br></pre></td></tr></table></figure></p><p>想再次debug就得杀掉进程重新打开，官方解释在0.55版本会修复此问题，看了下pr改动都是js代码，随即更新版本修复此问题。若想以后碰到类似框架性的问题，想要自己能有排错纠错能力，还是老老实实啃源码吧</p><a id="more"></a><h2 id="Reload"><a href="#Reload" class="headerlink" title="Reload"></a>Reload</h2><p>首先看看Reload，先从<code>Activity</code>下手，初始demo里<code>MainActivity</code>继承了<code>ReactActivity</code>，RN工程的初始化，加载jsbundle的触发都在这个<code>ReactActivity</code>中，然后具体业务逻辑又交给了它的代理类<code>ReactActivityDelegate</code>，里面做了初始化RN框架逻辑，框架初始化的流程先不管，主要看看reload流程</p><h3 id="onKeyUp"><a href="#onKeyUp" class="headerlink" title="onKeyUp"></a>onKeyUp</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean onKeyUp<span class="params">(int keyCode, KeyEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(getReactNativeHost()</span><span class="string">.hasInstance</span><span class="params">()</span> &amp;&amp; getReactNativeHost<span class="params">()</span><span class="string">.getUseDeveloperSupport</span><span class="params">()</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="params">(<span class="attr">keyCode</span> == KeyEvent.KEYCODE_MENU)</span> &#123;</span><br><span class="line">        getReactNativeHost<span class="params">()</span><span class="string">.getReactInstanceManager</span><span class="params">()</span><span class="string">.showDevOptionsDialog</span><span class="params">()</span>;</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      boolean didDoubleTapR = Assertions.assertNotNull<span class="params">(mDoubleTapReloadRecognizer)</span></span><br><span class="line">        <span class="string">.didDoubleTapR</span><span class="params">(keyCode, getPlainActivity()</span><span class="string">.getCurrentFocus</span><span class="params">()</span>);</span><br><span class="line">      <span class="keyword">if</span> <span class="params">(didDoubleTapR)</span> &#123;</span><br><span class="line">        getReactNativeHost<span class="params">()</span><span class="string">.getReactInstanceManager</span><span class="params">()</span><span class="string">.getDevSupportManager</span><span class="params">()</span><span class="string">.handleReloadJS</span><span class="params">()</span>;</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>ReactActivity</code>中侦听了物理按键，在keyCode为82即menu按键的时候，获取了RN主要的管理类<code>ReactInstanceManager</code>，然后调起了调试框<code>DevOptionsDialog</code>，具体业务逻辑在<code>DevSupportManagerImpl</code>这个类中，还可以看到有另外一个doubleTapR操作可以直接进行reload jsbundle，继续跟到<code>DevSupportManagerImpl</code>中，这里定义了调试dialog，跟到<code>R.string.catalyst_reloadjs</code>这个事件，触发了<code>handleReloadJS</code>，reload的流程入口就在这个方法中</p><h3 id="handleReloadJS"><a href="#handleReloadJS" class="headerlink" title="handleReloadJS"></a>handleReloadJS</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleReloadJS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UiThreadUtil.assertOnUiThread();</span><br><span class="line"></span><br><span class="line">    ReactMarker.logMarker(</span><br><span class="line">        ReactMarkerConstants.RELOAD,</span><br><span class="line">        mDevSettings.getPackagerConnectionSettings().getDebugServerHost());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dismiss redbox if exists</span></span><br><span class="line">    hideRedboxDialog();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mDevSettings.isRemoteJSDebugEnabled()) &#123;</span><br><span class="line">      PrinterHolder.getPrinter()</span><br><span class="line">          .logMessage(ReactDebugOverlayTags.RN_CORE, <span class="string">"RNCore: load from Proxy"</span>);</span><br><span class="line">      mDevLoadingViewController.showForRemoteJSEnabled();</span><br><span class="line">      mDevLoadingViewVisible = <span class="keyword">true</span>;</span><br><span class="line">      reloadJSInProxyMode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      PrinterHolder.getPrinter()</span><br><span class="line">          .logMessage(ReactDebugOverlayTags.RN_CORE, <span class="string">"RNCore: load from Server"</span>);</span><br><span class="line">      String bundleURL =</span><br><span class="line">        mDevServerHelper.getDevServerBundleURL(Assertions.assertNotNull(mJSAppBundleName));</span><br><span class="line">      reloadJSFromServer(bundleURL);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到这个方法主要是在取bundleURL，还区分了debug js remotely模式，可以看到这里的<code>mJSAppBundleName</code>是在构造函里数获取的，然后构造函数用IDE的函数跳转功能并不能找到在哪里构造的，仔细观察<code>DevSupportManagerImpl</code>的接口<code>DevSupportManager</code>，可以看到在<code>DevSupportManagerFactory</code>这个工厂类中有使用，这里是用的反射进行构造的<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DevSupportManager create(</span><br><span class="line">    Context applicationContext,</span><br><span class="line">    ReactInstanceManagerDevHelper reactInstanceManagerHelper,</span><br><span class="line">    <span class="comment">// 这个是mJSAppBundleName</span></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="built_in">String</span> packagerPathForJSBundleName,</span><br><span class="line">    <span class="built_in">boolean</span> enableOnCreate,</span><br><span class="line">    <span class="meta">@Nullable</span> RedBoxHandler redBoxHandler,</span><br><span class="line">    <span class="meta">@Nullable</span> DevBundleDownloadListener devBundleDownloadListener,</span><br><span class="line">    int minNumShakes) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!enableOnCreate) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DisabledDevSupportManager();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ProGuard is surprisingly smart in this case and will keep a class if it detects a call to</span></span><br><span class="line">      <span class="comment">// Class.forName() with a static string. So instead we generate a quasi-dynamic string to</span></span><br><span class="line">      <span class="comment">// confuse it.</span></span><br><span class="line">      <span class="built_in">String</span> className =</span><br><span class="line">        <span class="keyword">new</span> StringBuilder(DEVSUPPORT_IMPL_PACKAGE)</span><br><span class="line">          .append(<span class="string">"."</span>)</span><br><span class="line">          .append(DEVSUPPORT_IMPL_CLASS)</span><br><span class="line">          .toString();</span><br><span class="line">      Class&lt;?&gt; devSupportManagerClass =</span><br><span class="line">        Class.forName(className);</span><br><span class="line">      Constructor <span class="keyword">constructor</span> =</span><br><span class="line">        devSupportManagerClass.getConstructor(<span class="params"></span></span><br><span class="line"><span class="params">          Context.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          ReactInstanceManagerDevHelper.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          <span class="built_in">String</span>.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          <span class="built_in">boolean</span>.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          RedBoxHandler.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          DevBundleDownloadListener.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="params">          int.<span class="keyword">class</span></span>);</span><br><span class="line">      return (<span class="params">DevSupportManager</span>) <span class="keyword">constructor</span>.newInstance(<span class="params"></span></span><br><span class="line"><span class="params">        applicationContext,</span></span><br><span class="line"><span class="params">        reactInstanceManagerHelper,</span></span><br><span class="line"><span class="params">        packagerPathForJSBundleName,</span></span><br><span class="line"><span class="params">        <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">        redBoxHandler,</span></span><br><span class="line"><span class="params">        devBundleDownloadListener,</span></span><br><span class="line"><span class="params">        minNumShakes</span>);</span><br><span class="line">    &#125; catch (<span class="params">Exception e</span>) &#123;</span><br><span class="line">      throw new RuntimeException(<span class="params"></span></span><br><span class="line"><span class="params">        "Requested enabled DevSupportManager, but DevSupportManagerImpl <span class="keyword">class</span> was not found" +</span></span><br><span class="line"><span class="params">          " or could not be created",</span></span><br><span class="line"><span class="params">        e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>跟到最后可以发现是在<code>ReactNativeHost</code>这个抽象类的<code>getJSMainModuleName()</code>方法拿到的，这个方法可以给用户重写进行自定义，再回到<code>handleReloadJS</code>方法，拼接出来的bundleURL长这样<br><code>http://localhost:8081/index.delta?platform=android&amp;dev=true&amp;minify=false</code>，host就是我们本地Nodejs启动的服务器地址<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">reloadJSFromServer</span><span class="params">(<span class="keyword">final</span> String bundleURL)</span> </span>&#123;</span><br><span class="line">    ReactMarker.logMarker(ReactMarkerConstants.DOWNLOAD_START);</span><br><span class="line"></span><br><span class="line">    mDevLoadingViewController.showForUrl(bundleURL);</span><br><span class="line">    mDevLoadingViewVisible = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> BundleDownloader.BundleInfo bundleInfo = <span class="keyword">new</span> BundleDownloader.BundleInfo();</span><br><span class="line">    <span class="comment">// 触发下载任务</span></span><br><span class="line">    mDevServerHelper.downloadBundleFromURL(</span><br><span class="line">        <span class="comment">// 侦听下载</span></span><br><span class="line">        <span class="keyword">new</span> DevBundleDownloadListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mDevLoadingViewController.hide();</span><br><span class="line">            mDevLoadingViewVisible = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (DevSupportManagerImpl.<span class="keyword">this</span>) &#123;</span><br><span class="line">              mBundleStatus.isLastDownloadSucess = <span class="keyword">true</span>;</span><br><span class="line">              mBundleStatus.updateTimestamp = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mBundleDownloadListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">              mBundleDownloadListener.onSuccess();</span><br><span class="line">            &#125;</span><br><span class="line">            UiThreadUtil.runOnUiThread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ReactMarker.logMarker(ReactMarkerConstants.DOWNLOAD_END, bundleInfo.toJSONString());</span><br><span class="line">                    mReactInstanceManagerHelper.onJSBundleLoadedFromServer();</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(@Nullable <span class="keyword">final</span> String status, @Nullable <span class="keyword">final</span> Integer done, @Nullable <span class="keyword">final</span> Integer total)</span> </span>&#123;</span><br><span class="line">            mDevLoadingViewController.updateProgress(status, done, total);</span><br><span class="line">            <span class="keyword">if</span> (mBundleDownloadListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">              mBundleDownloadListener.onProgress(status, done, total);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">final</span> Exception cause)</span> </span>&#123;</span><br><span class="line">            mDevLoadingViewController.hide();</span><br><span class="line">            mDevLoadingViewVisible = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (DevSupportManagerImpl.<span class="keyword">this</span>) &#123;</span><br><span class="line">              mBundleStatus.isLastDownloadSucess = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mBundleDownloadListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">              mBundleDownloadListener.onFailure(cause);</span><br><span class="line">            &#125;</span><br><span class="line">            FLog.e(ReactConstants.TAG, <span class="string">"Unable to download JS bundle"</span>, cause);</span><br><span class="line">            UiThreadUtil.runOnUiThread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> DebugServerException) &#123;</span><br><span class="line">                      DebugServerException debugServerException = (DebugServerException) cause;</span><br><span class="line">                      showNewJavaError(debugServerException.getMessage(), cause);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      showNewJavaError(</span><br><span class="line">                          mApplicationContext.getString(R.string.catalyst_jsload_error),</span><br><span class="line">                          cause);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mJSBundleTempFile,</span><br><span class="line">        bundleURL,</span><br><span class="line">        bundleInfo);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法触发了下载任务和下载成功后续的操作，跟进<code>mDevServerHelper.downloadBundleFromUR()</code>方法，走到<code>BundleDownloader</code>类的<code>downloadBundleFromURL</code>方法<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> downloadBundleFromURL(</span><br><span class="line">      <span class="keyword">final</span> DevBundleDownloadListener callback,</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">File</span> outputFile,</span><br><span class="line">      <span class="keyword">final</span> String bundleURL,</span><br><span class="line">      <span class="keyword">final</span> @Nullable BundleInfo bundleInfo) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化okhttp请求</span></span><br><span class="line">    <span class="keyword">final</span> Request request =</span><br><span class="line">        <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(mBundleDeltaClient.toDeltaUrl(bundleURL))</span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> there is a bug that makes MultipartStreamReader to never find the end of the</span></span><br><span class="line">            <span class="comment">// multipart message. This temporarily disables the multipart mode to work around it,</span></span><br><span class="line">            <span class="comment">// but</span></span><br><span class="line">            <span class="comment">// it means there is no progress bar displayed in the React Native overlay anymore.</span></span><br><span class="line">            <span class="comment">// .addHeader("Accept", "multipart/mixed")</span></span><br><span class="line">            .build();</span><br><span class="line">    mDownloadBundleFromURLCall = Assertions.assertNotNull(mClient.newCall(request));</span><br><span class="line">    mDownloadBundleFromURLCall.enqueue(</span><br><span class="line">        <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> onFailure(<span class="keyword">Call</span> <span class="keyword">call</span>, IOException e) &#123;</span><br><span class="line">            <span class="comment">// ignore callback if call was cancelled</span></span><br><span class="line">            <span class="keyword">if</span> (mDownloadBundleFromURLCall == <span class="keyword">null</span> || mDownloadBundleFromURLCall.isCanceled()) &#123;</span><br><span class="line">              mDownloadBundleFromURLCall = <span class="keyword">null</span>;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mDownloadBundleFromURLCall = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            callback.onFailure(</span><br><span class="line">                DebugServerException.makeGeneric(</span><br><span class="line">                    <span class="string">"Could not connect to development server."</span>,</span><br><span class="line">                    <span class="string">"URL: "</span> + <span class="keyword">call</span>.request().url().toString(),</span><br><span class="line">                    e));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> onResponse(<span class="keyword">Call</span> <span class="keyword">call</span>, <span class="keyword">final</span> Response response) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">// ignore callback if call was cancelled</span></span><br><span class="line">            <span class="keyword">if</span> (mDownloadBundleFromURLCall == <span class="keyword">null</span> || mDownloadBundleFromURLCall.isCanceled()) &#123;</span><br><span class="line">              mDownloadBundleFromURLCall = <span class="keyword">null</span>;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mDownloadBundleFromURLCall = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String url = response.request().url().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure the result is a multipart response and parse the boundary.</span></span><br><span class="line">            String contentType = response.header(<span class="string">"content-type"</span>);</span><br><span class="line">            Pattern regex = Pattern.<span class="keyword">compile</span>(<span class="string">"multipart/mixed;.*boundary=\"([^\"]+)\""</span>);</span><br><span class="line">            Matcher match = regex.matcher(contentType);</span><br><span class="line">            <span class="keyword">try</span> (Response r = response) &#123;</span><br><span class="line">              <span class="keyword">if</span> (match.<span class="keyword">find</span>()) &#123;</span><br><span class="line">                processMultipartResponse(</span><br><span class="line">                  url, r, match.<span class="keyword">group</span>(<span class="number">1</span>), outputFile, bundleInfo, callback);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// In case the server doesn't support multipart/mixed responses, fallback to normal</span></span><br><span class="line">                <span class="comment">// download.</span></span><br><span class="line">                processBundleResult(</span><br><span class="line">                  url,</span><br><span class="line">                  r.code(),</span><br><span class="line">                  r.headers(),</span><br><span class="line">                  Okio.buffer(r.body().<span class="keyword">source</span>()),</span><br><span class="line">                  outputFile,</span><br><span class="line">                  bundleInfo,</span><br><span class="line">                  callback);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>先看看这个方法的形参</p><ul><li>DevBundleDownloadListener callback：jsbundle下载回调</li><li>File outputFile：Bundle缓存地址，我这里具体为<br><code>/data/data/com.socketclientrn/files/ReactNativeDevBundle.js</code></li><li>String bundleURL：下载jsbundle的URL</li></ul><p>再看函数具体逻辑，内部使用了okhttp进行下载，下载成功后，<code>onResponse</code>回调中对返回数据进行了缓存。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">private</span> void processBundleResult(</span><br><span class="line">      <span class="keyword">String </span>url,</span><br><span class="line">      int statusCode,</span><br><span class="line">      Headers headers,</span><br><span class="line">      <span class="keyword">BufferedSource </span><span class="keyword">body,</span></span><br><span class="line"><span class="keyword"> </span>     File outputFile,</span><br><span class="line">      <span class="keyword">BundleInfo </span><span class="keyword">bundleInfo,</span></span><br><span class="line"><span class="keyword"> </span>     DevBundleDownloadListener callback)</span><br><span class="line">      throws IOException &#123;</span><br><span class="line">    // Check for server errors. <span class="meta">If</span> the server error has the expected form, fail with more <span class="meta">info</span>.</span><br><span class="line">    <span class="meta">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">String </span><span class="keyword">bodyString </span>= <span class="keyword">body.readUtf8();</span></span><br><span class="line"><span class="keyword"> </span>     DebugServerException debugServerException = DebugServerException.parse(<span class="keyword">bodyString);</span></span><br><span class="line"><span class="keyword"> </span>     <span class="meta">if</span> (debugServerException != null) &#123;</span><br><span class="line">        callback.onFailure(debugServerException)<span class="comment">;</span></span><br><span class="line">      &#125; <span class="meta">else</span> &#123;</span><br><span class="line">        <span class="keyword">StringBuilder </span><span class="built_in">sb</span> = new <span class="keyword">StringBuilder();</span></span><br><span class="line"><span class="keyword"> </span>       <span class="built_in">sb</span>.append(<span class="string">"The development server returned response error code: "</span>).append(statusCode).append(<span class="string">"\n\n"</span>)</span><br><span class="line">          .append(<span class="string">"URL: "</span>).append(url).append(<span class="string">"\n\n"</span>)</span><br><span class="line">          .append(<span class="string">"Body:\n"</span>)</span><br><span class="line">          .append(<span class="keyword">bodyString);</span></span><br><span class="line"><span class="keyword"> </span>       callback.onFailure(new DebugServerException(<span class="built_in">sb</span>.toString()))<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      return<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">bundleInfo </span>!= null) &#123;</span><br><span class="line">      <span class="keyword">populateBundleInfo(url, </span>headers, <span class="keyword">bundleInfo);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line"></span><br><span class="line">    File tmpFile = new File(outputFile.getPath() + <span class="string">".tmp"</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean </span><span class="keyword">bundleUpdated;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (<span class="keyword">BundleDeltaClient.isDeltaUrl(url)) </span>&#123;</span><br><span class="line">      // <span class="meta">If</span> the <span class="keyword">bundle </span>URL has the delta extension, we need to use the delta patching logic.</span><br><span class="line">      <span class="keyword">bundleUpdated </span>= mBundleDeltaClient.storeDeltaInFile(<span class="keyword">body, </span>tmpFile)<span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> &#123;</span><br><span class="line">      mBundleDeltaClient.reset()<span class="comment">;</span></span><br><span class="line">      <span class="keyword">bundleUpdated </span>= storePlainJSInFile(<span class="keyword">body, </span>tmpFile)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">bundleUpdated) </span>&#123;</span><br><span class="line">      // <span class="meta">If</span> we have received a new <span class="keyword">bundle </span>from the server, <span class="keyword">move </span><span class="keyword">it </span>to <span class="keyword">its </span>final destination.</span><br><span class="line">      <span class="meta">if</span> (!tmpFile.renameTo(outputFile)) &#123;</span><br><span class="line">        throw new IOException(<span class="string">"Couldn't rename "</span> + tmpFile + <span class="string">" to "</span> + outputFile)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    callback.onSuccess()<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>内部具体的流操作使用了okio，具体缓存的时候在参数<code>outputFile</code>后面加了个<code>.tmp</code>然后进行存储，存储ok后回调<code>DevBundleDownloadListener</code>。<br>再回到<code>DevSupportManagerImpl</code>的<code>reloadJSFromServer</code>方法，可以在<code>onSuccess</code>回调中看到判空<code>mBundleDownloadListener</code>然后调用的逻辑，这个回调是初始化<code>DevSupportManagerImpl</code>传进来的，调用链跟到最后是在<code>ReactNativeHost</code>的<code>createReactInstanceManager</code>方法中构建<code>ReactInstanceManager</code>时传递的，这个方法开发者是可以重写的，提供给开发者侦听jsbundle下载是否成功与失败</p><h3 id="createCachedBundleFromNetworkLoader"><a href="#createCachedBundleFromNetworkLoader" class="headerlink" title="createCachedBundleFromNetworkLoader"></a>createCachedBundleFromNetworkLoader</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function">ReactInstanceManagerDevHelper <span class="title">createDevHelperInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReactInstanceManagerDevHelper() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReloadWithJSDebugger</span><span class="params">(JavaJSExecutor.Factory jsExecutorFactory)</span> </span>&#123;</span><br><span class="line">        ReactInstanceManager.<span class="keyword">this</span>.onReloadWithJSDebugger(jsExecutorFactory);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onJSBundleLoadedFromServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReactInstanceManager.<span class="keyword">this</span>.onJSBundleLoadedFromServer();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">toggleElementInspector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReactInstanceManager.<span class="keyword">this</span>.toggleElementInspector();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Activity <span class="title">getCurrentActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ReactInstanceManager.<span class="keyword">this</span>.mCurrentActivity;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>跟着调用链，最后走到了<code>createCachedBundleFromNetworkLoader</code>方法里<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSBundleLoader createCachedBundleFromNetworkLoader(</span><br><span class="line">      <span class="keyword">final</span> String sourceURL,</span><br><span class="line">      <span class="keyword">final</span> String cachedFileLocation) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JSBundleLoader() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function">String <span class="title">loadScript</span><span class="params">(CatalystInstanceImpl instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          instance.loadScriptFromFile(cachedFileLocation, sourceURL, <span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">return</span> sourceURL;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> DebugServerException.makeGeneric(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><code>createCachedBundleFromNetworkLoader</code>构造完<code>JSBundleLoader</code>后，就开始调用<code>CatalystInstanceImpl</code>去加载jsbundle了，<code>CatalystInstance</code>是Java，C，JavaScript三端通信的入口。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* package */</span> <span class="keyword">void</span> loadScriptFromFile(<span class="keyword">String</span> fileName, <span class="keyword">String</span> sourceURL, <span class="built_in">boolean</span> loadSynchronously) &#123;</span><br><span class="line">    mSourceURL = sourceURL;</span><br><span class="line">    jniLoadScriptFromFile(fileName, sourceURL, loadSynchronously);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> jniLoadScriptFromFile(<span class="keyword">String</span> fileName, <span class="keyword">String</span> sourceURL, <span class="built_in">boolean</span> loadSynchronously);</span><br></pre></td></tr></table></figure></p><p>可以看到最终加载jsbundle是在C里面完成的</p><h3 id="Reload总流程"><a href="#Reload总流程" class="headerlink" title="Reload总流程"></a>Reload总流程</h3><p>reload总的流程可以总结为：点击reload -&gt; <code>DevSupportManagerImpl</code>拼接URL，触发下载 -&gt; <code>BundleDownloader</code>请求服务器下载jsbundle -&gt; 回调<code>DevSupportManagerImpl</code> -&gt; 调用<code>CatalystInstanceImpl</code>通知C加载新的jsbundle</p><h2 id="Debug-JS-Remotely"><a href="#Debug-JS-Remotely" class="headerlink" title="Debug JS Remotely"></a>Debug JS Remotely</h2><h3 id="onKeyUp-1"><a href="#onKeyUp-1" class="headerlink" title="onKeyUp"></a>onKeyUp</h3><p>先看看Debug JS Remotely的点击事件，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">options.put(</span><br><span class="line">        remoteJsDebugMenuItemTitle,</span><br><span class="line">        <span class="keyword">new</span> DevOptionHandler() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onOptionSelected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mDevSettings.setRemoteJSDebugEnabled(!mDevSettings.isRemoteJSDebugEnabled());</span><br><span class="line">            handleReloadJS();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>先设置反了一下<code>remote_js_debug</code>这个key，使用SharedPreference存储，然后就走到<code>handleReloadJS</code>方法里</p><h3 id="handleReloadJS-1"><a href="#handleReloadJS-1" class="headerlink" title="handleReloadJS"></a>handleReloadJS</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (mDevSettings.isRemoteJSDebugEnabled()) &#123;</span><br><span class="line">      PrinterHolder.getPrinter()</span><br><span class="line">          .logMessage(ReactDebugOverlayTags.RN_CORE, <span class="string">"RNCore: load from Proxy"</span>)<span class="comment">;</span></span><br><span class="line">      mDevLoadingViewController.<span class="keyword">showForRemoteJSEnabled();</span></span><br><span class="line"><span class="keyword"> </span>     mDevLoadingViewVisible = true<span class="comment">;</span></span><br><span class="line">      reloadJSInProxyMode()<span class="comment">;</span></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      PrinterHolder.getPrinter()</span><br><span class="line">          .logMessage(ReactDebugOverlayTags.RN_CORE, <span class="string">"RNCore: load from Server"</span>)<span class="comment">;</span></span><br><span class="line">      String <span class="keyword">bundleURL </span>=</span><br><span class="line">        mDevServerHelper.getDevServerBundleURL(Assertions.assertNotNull(mJSAppBundleName))<span class="comment">;</span></span><br><span class="line">      reloadJSFromServer(<span class="keyword">bundleURL);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br></pre></td></tr></table></figure><p>这里区分了debug js remotely模式与普通开发模式，主要看看<code>reloadJSInProxyMode</code>方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">reloadJSInProxyMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// When using js proxy, there is no need to fetch JS bundle as proxy executor will do that</span></span><br><span class="line">    <span class="comment">// anyway</span></span><br><span class="line">    mDevServerHelper.launchJSDevtools();</span><br><span class="line"></span><br><span class="line">    JavaJSExecutor.Factory factory = <span class="keyword">new</span> JavaJSExecutor.Factory() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function">JavaJSExecutor <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WebsocketJavaScriptExecutor executor = <span class="keyword">new</span> WebsocketJavaScriptExecutor();</span><br><span class="line">        SimpleSettableFuture&lt;Boolean&gt; future = <span class="keyword">new</span> SimpleSettableFuture&lt;&gt;();</span><br><span class="line">        executor.connect(</span><br><span class="line">            mDevServerHelper.getWebsocketProxyURL(),</span><br><span class="line">            getExecutorConnectCallback(future));</span><br><span class="line">        <span class="comment">// TODO(t9349129) Don't use timeout</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          future.get(<span class="number">90</span>, TimeUnit.SECONDS);</span><br><span class="line">          <span class="keyword">return</span> executor;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> (Exception) e.getCause();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | TimeoutException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    mReactInstanceManagerHelper.onReloadWithJSDebugger(factory);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>先调用了<code>launchJSDevtools</code>方法，里面仅仅做了一个简单的request，URL为<br><code>http://localhost:8081/launch-js-devtools</code>，目的应该是打开调试网页，然后实例化了一个实现<code>JavaJSExecutor.Factory</code>接口的匿名类，<code>create</code>方法会在调用<code>recreateReactContextInBackground</code>方法里的子线程中调用，跟进到<code>connectInternal</code>方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> connectInternal(</span><br><span class="line">      String webSocketServerUrl,</span><br><span class="line">      <span class="keyword">final</span> JSExecutorConnectCallback callback) &#123;</span><br><span class="line">    <span class="keyword">final</span> JSDebuggerWebSocketClient client = <span class="keyword">new</span> JSDebuggerWebSocketClient();</span><br><span class="line">    <span class="keyword">final</span> Handler timeoutHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line">    client.connect(</span><br><span class="line">        webSocketServerUrl, <span class="keyword">new</span> JSDebuggerWebSocketClient.JSDebuggerCallback() &#123;</span><br><span class="line">          <span class="comment">// It's possible that both callbacks can fire on an error so make sure we only</span></span><br><span class="line">          <span class="comment">// dispatch results once to our callback.</span></span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">boolean</span> didSendResult = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(@Nullable String response)</span> </span>&#123;</span><br><span class="line">            client.prepareJSRuntime(</span><br><span class="line">                <span class="keyword">new</span> JSDebuggerWebSocketClient.JSDebuggerCallback() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(@Nullable String response)</span> </span>&#123;</span><br><span class="line">                    timeoutHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">                    mWebSocketClient = client;</span><br><span class="line">                    <span class="keyword">if</span> (!didSendResult) &#123;</span><br><span class="line">                      callback.onSuccess();</span><br><span class="line">                      didSendResult = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">                    timeoutHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!didSendResult) &#123;</span><br><span class="line">                      callback.onFailure(cause);</span><br><span class="line">                      didSendResult = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">            timeoutHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (!didSendResult) &#123;</span><br><span class="line">              callback.onFailure(cause);</span><br><span class="line">              didSendResult = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    timeoutHandler.postDelayed(</span><br><span class="line">        <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            client.closeQuietly();</span><br><span class="line">            callback.onFailure(</span><br><span class="line">                <span class="keyword">new</span> WebsocketExecutorTimeoutException(</span><br><span class="line">                    <span class="string">"Timeout while connecting to remote debugger"</span>));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        CONNECT_TIMEOUT_MS);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这里使用了websocket与本地服务器进行连接，服务器URL为：<br><code>ws://localhost:8081/debugger-proxy?role=client</code>，<br>继续跟到<code>JSDebuggerWebSocketClient</code>的<code>connect</code>方法<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void connect(<span class="keyword">String</span> url, JSDebuggerCallback callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mHttpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"JSDebuggerWebSocketClient is already initialized."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mConnectCallback = callback;</span><br><span class="line">    mHttpClient = <span class="keyword">new</span> <span class="type">OkHttpClient</span>.Builder()</span><br><span class="line">      .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">      .writeTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">      .readTimeout(<span class="number">0</span>, TimeUnit.MINUTES) <span class="comment">// Disable timeouts for read</span></span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">    Request request = <span class="keyword">new</span> <span class="type">Request</span>.Builder().url(url).build();</span><br><span class="line">    mHttpClient.<span class="keyword">new</span><span class="type">WebSocket</span>(request, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这里是使用okhttp来和本地服务器进行长连接，建立起连接后可以看到<code>JSDebuggerWebSocketClient</code>里<code>onMessage</code>，<code>sendMessage</code>方法与服务器通信的逻辑。这里我们先回到<code>reloadJSInProxyMode</code>方法，跟到<code>onReloadWithJSDebugger</code>方法<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void onReloadWithJSDebugger(<span class="keyword">JavaJSExecutor.Factory </span><span class="keyword">jsExecutorFactory) </span>&#123;</span><br><span class="line">    Log.d(ReactConstants.TAG, <span class="string">"ReactInstanceManager.onReloadWithJSDebugger()"</span>)<span class="comment">;</span></span><br><span class="line">    recreateReactContextInBackground(</span><br><span class="line">        new ProxyJavaScriptExecutor.Factory(<span class="keyword">jsExecutorFactory),</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">JSBundleLoader.createRemoteDebuggerBundleLoader(</span></span><br><span class="line"><span class="keyword"> </span>           mDevSupportManager.getJSBundleURLForRemoteDebugging(),</span><br><span class="line">            mDevSupportManager.getSourceUrl()))<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这里逻辑与普通debug模式差不多，都是构造<code>JSBundleLoader</code>和<code>JavaScriptExecutorFactory</code>，跟到<code>createRemoteDebuggerBundleLoader</code>方法中</p><h3 id="createRemoteDebuggerBundleLoader"><a href="#createRemoteDebuggerBundleLoader" class="headerlink" title="createRemoteDebuggerBundleLoader"></a>createRemoteDebuggerBundleLoader</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * This loader <span class="keyword">is</span> used when proxy debugging <span class="keyword">is</span> enabled. In <span class="keyword">that</span> case there <span class="keyword">is</span> no point <span class="keyword">in</span> fetching</span><br><span class="line">   * <span class="keyword">the</span> bundle <span class="keyword">from</span> device <span class="keyword">as</span> remote executor will have <span class="keyword">to</span> do <span class="keyword">it</span> anyway.</span><br><span class="line">   */</span><br><span class="line">  public static JSBundleLoader createRemoteDebuggerBundleLoader(</span><br><span class="line">      final String proxySourceURL,</span><br><span class="line">      final String realSourceURL) &#123;</span><br><span class="line"><span class="built_in">    return</span> new JSBundleLoader() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public String loadScript(CatalystInstanceImpl instance) &#123;</span><br><span class="line">        instance.setSourceURLs(realSourceURL, proxySourceURL);</span><br><span class="line"><span class="built_in">        return</span> realSourceURL;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">   * This API <span class="keyword">is</span> used <span class="keyword">in</span> situations <span class="keyword">where</span> <span class="keyword">the</span> JS bundle <span class="keyword">is</span> being executed <span class="keyword">not</span> <span class="keyword">on</span></span><br><span class="line">   * <span class="keyword">the</span> device, <span class="keyword">but</span> <span class="keyword">on</span> a host machine. In <span class="keyword">that</span> case, we must provide two source</span><br><span class="line">   * URLs <span class="keyword">for</span> <span class="keyword">the</span> JS bundle: One <span class="keyword">to</span> be used <span class="keyword">on</span> <span class="keyword">the</span> device, <span class="keyword">and</span> one <span class="keyword">to</span> be used <span class="keyword">on</span></span><br><span class="line">   * <span class="keyword">the</span> remote debugging machine.</span><br><span class="line">   *</span><br><span class="line">   * @param deviceURL A source URL <span class="keyword">that</span> <span class="keyword">is</span> accessible <span class="keyword">from</span> this device.</span><br><span class="line">   * @param remoteURL A source URL <span class="keyword">that</span> <span class="keyword">is</span> accessible <span class="keyword">from</span> <span class="keyword">the</span> remote machine</span><br><span class="line">   * executing <span class="keyword">the</span> JS.</span><br><span class="line">   */</span><br><span class="line">  /* package */ void setSourceURLs(String deviceURL, String remoteURL) &#123;</span><br><span class="line">    mSourceURL = deviceURL;</span><br><span class="line">    jniSetSourceURL(remoteURL);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以从注释中看出，此时jsbundle也是从本地服务器下载的</p><p>跳出逻辑看看JSBundleLoader，暴露了四个方法</p><ul><li><code>createAssetLoader</code> 从asset目录中创建loader</li><li><code>createFileLoader</code> 从具体某个文件中创建loader</li><li><code>createCachedBundleFromNetworkLoader</code> 从URL中加载</li><li><p><code>createRemoteDebuggerBundleLoader</code> 同上</p><p>所以加载JSBundle可以归类为以上三种方式</p></li></ul><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>开头的问题是js层面的，好像跟我分析的Java层并没什么卵关系。。但是读一读源码，总归没有坏处</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/05/15/React%20Native%20for%20Android%20源码解析：Reload,%20Debug%20JS%20Remotely做了什么？/title_background.jpeg&quot; title=&quot;忽悠妹纸买的splatoon不会玩然后甩给我了，美滋滋&quot;&gt;
&lt;h2 id=&quot;Reload-debug-js-remotely罪恶滔天，弄的百姓怨声载道&quot;&gt;&lt;a href=&quot;#Reload-debug-js-remotely罪恶滔天，弄的百姓怨声载道&quot; class=&quot;headerlink&quot; title=&quot;Reload, debug js remotely罪恶滔天，弄的百姓怨声载道&quot;&gt;&lt;/a&gt;Reload, debug js remotely罪恶滔天，弄的百姓怨声载道&lt;/h2&gt;&lt;p&gt;最近使用0.54.0版本开发有个调试的bug非常恶心，debug js remotely总是抛&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DeltaPatcher&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt; Uncaught (&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; promise) Error: DeltaPatcher should receive &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; fresh Delta when being initialized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                       at DeltaPatcher&lt;span class=&quot;selector-class&quot;&gt;.applyDelta&lt;/span&gt; (DeltaPatcher&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                       at deltaUrlToBlobUrl (deltaUrlToBlobUrl&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                       at &amp;lt;anonymous&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;想再次debug就得杀掉进程重新打开，官方解释在0.55版本会修复此问题，看了下pr改动都是js代码，随即更新版本修复此问题。若想以后碰到类似框架性的问题，想要自己能有排错纠错能力，还是老老实实啃源码吧&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>记一次RN Android端在Mobx环境下使用FlatList导致列表错乱的问题</title>
    <link href="http://yoursite.com/2018/04/26/%E8%AE%B0RN%20Android%E7%AB%AF%E5%9C%A8Mobx%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8FlatList%E5%AF%BC%E8%87%B4%E5%88%97%E8%A1%A8%E9%94%99%E4%B9%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/26/记RN Android端在Mobx环境下使用FlatList导致列表错乱的问题/</id>
    <published>2018-04-26T09:04:07.000Z</published>
    <updated>2019-03-28T13:06:27.586Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/26/记RN%20Android端在Mobx环境下使用FlatList导致列表错乱的问题/title.jpeg" title="日常peropero 好久没拍塑料小人了"><h2 id="排查结果"><a href="#排查结果" class="headerlink" title="排查结果"></a>排查结果</h2><p>首先说下结果，以供参考<br>github的issue有FlatList不显示的问题，表现的跟我不太一样，他们解决方案是将<code>removeClippedSubviews={false}</code>，我尝试了一下不适用我的场景<br>最终找出罪魁祸首是mobx的observable变量与FlatList的data在release环境下，未关闭RN log日志所导致的冲突</p><ul><li>解决方案1：release环境关掉日志（我是用babel的<code>transform-remove-console</code>插件来关闭的）</li><li>解决方案2：如果一定要开日志，FlatList的data不要给observable Array，给普通Array</li></ul><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>首先问题如下：<br>我的RN版本<code>0.54.0</code>，mobx<code>3.4.1</code>，mobx-react<code>4.3.5</code><br><img src="https://upload-images.jianshu.io/upload_images/4730298-252cc6c124e102f4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="列表错乱现象"></p><p>一个长度为两百多的数组只显示了二十三条，后面全是空白，继续往下划是一个无限空白的list，还伴随着闪屏现象，太可怕，更可怕的是debug包无此问题，release包却有，最怕排查这种问题，耗时耗力</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>当时第一反应是没做分页一次性加载太多数据导致的，因为没有想到这个接口会有这么多数据，一般也就十几二十条，随即进行了分页处理，然而并没有什么卵用，仍然是二十三条后就显示空白，再往后滑动闪屏，此时也没有其他头绪，这下子只能啃源码来看什么原因了，不过好在FlatList是纯js实现的，不需要再去啃Java代码了。<br>首先找到FlatList.js文件，看它的render函数</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-8aee73f45bf505e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="render函数"></p><p>通过配置<code>legacyImplementation</code>来选择使用<code>MetroListView</code>或者<code>VirtualizedList</code>前者是老的ListView，后者就是替代老ListView的新列表组件，官方解释这个变量是用来比较性能的，一般用不着，着重看看<code>VirtualizedList</code>，view出了问题首先就看看<code>renderItem</code>方法，下图为<code>VirtualizedList</code>的<code>renderItem</code>方法</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-eb0687b8e78b93c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VirtualizedList的renderItem方法"></p><p>这里就只是区分了多栏与单栏列表，我的使用场景是单栏列表，这行代码就只是给FlatList使用者回传了一个info参数，再看看info参数具体，找到<code>VirtualizedList</code>的代码，再找<code>renderItem</code>这个props在哪里调用的，下图为<code>CellRenderer的render</code>方法里<code>renderItem</code>回传参数</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-24d4fac0c56e442f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CellRenderer的render方法里renderItem回传参数"></p><p>可以看到是在<code>CellRenderer</code>这个组件的render方法里调用的，传入了<code>item，index，separators</code>，我们要找的就是item，但是item是从props中拿到的，再找找<code>CellRenderer</code>在哪里使用，可以看到是在<code>_pushCells</code>方法中使用，<code>_pushCells</code>方法在<code>VirtualizedList</code>的render方法中调用，下图为<code>VirtualizedList</code>的<code>render</code>方法</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-c129e421ac78c6a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VirtualizedList的render方法"></p><p>cells作为<code>React.cloneElement(element,[props],[...children])</code>的第三参数，如上图代码，此时基本可以确定问题应该在这个<code>cells</code>参数上了，再回头看看<code>_pushCells</code>方法，下图为<code>VirtualizedList</code>的<code>_pushCells</code>方法</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-f17d8aba21012b3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VirtualizedList的_pushCells方法"></p><p>可以看到item数据是来自props的<code>getItem</code>方法，这个方法传入了一个data和一个ii下标，顾名思义应该就是在取单个列表的渲染数据，这个data就是FlatList的data，我们的列表数据源，再回到调用方FlatList找到<code>getItem</code>方法，下图为<code>FlatList</code>的<code>getItem</code>方法</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-5b20cb33eee3fd3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FlatList的getItem方法"></p><p>这个方法只是对多栏和单栏列表取数据的逻辑做了区分，我们可以试着把取出来的数据打印出来看是否有异常，加好调试代码，再编译一个带log的release包</p><p><img src="https://upload-images.jianshu.io/upload_images/4730298-aabfc4f46cbe3b09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="item数据"></p><p>可以看到第23个都挺正常，到了24个就不正常了，到了28个直接抛出error了，加了调试日志之后还会crash了，所以这个数据源可能有问题，联想到我用的Mobx框架，传给data的是一个Observable Array，而非普通Array，猜测是Observable Array与FlatList在此环境下有冲突，随后将其替换成普通Array，然后打包，测试一切正常</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>当时得出结论是FlatList和Observable Array搭配使用就会在release环境出问题，但是如果是这种结果，那问题影响面就太大了，然后发现我打的release包为了方便定位bug，将<code>transform-remove-console</code>这个插件屏蔽了，打开了js日志。随后我又试着关闭日志，FlatList继续使用Observable Array，然后打包，测试一切正常，然后就经过了几番测试，基本确认了问题所在，实在有点玄学，为了定位这一个bug，打了快一天的包。。当然结论不重要，重要的是解决问题过程，以后再遇到这种问题，解决起来应该更加得心应手</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/26/记RN%20Android端在Mobx环境下使用FlatList导致列表错乱的问题/title.jpeg&quot; title=&quot;日常peropero 好久没拍塑料小人了&quot;&gt;
&lt;h2 id=&quot;排查结果&quot;&gt;&lt;a href=&quot;#排查结果&quot; class=&quot;headerlink&quot; title=&quot;排查结果&quot;&gt;&lt;/a&gt;排查结果&lt;/h2&gt;&lt;p&gt;首先说下结果，以供参考&lt;br&gt;github的issue有FlatList不显示的问题，表现的跟我不太一样，他们解决方案是将&lt;code&gt;removeClippedSubviews={false}&lt;/code&gt;，我尝试了一下不适用我的场景&lt;br&gt;最终找出罪魁祸首是mobx的observable变量与FlatList的data在release环境下，未关闭RN log日志所导致的冲突&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方案1：release环境关掉日志（我是用babel的&lt;code&gt;transform-remove-console&lt;/code&gt;插件来关闭的）&lt;/li&gt;
&lt;li&gt;解决方案2：如果一定要开日志，FlatList的data不要给observable Array，给普通Array&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>浅析JS闭包（Closure）与函数的柯里化（Currying）</title>
    <link href="http://yoursite.com/2018/04/26/%E6%B5%85%E6%9E%90JS%E9%97%AD%E5%8C%85%EF%BC%88Closure%EF%BC%89%E4%B8%8E%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%88Currying%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/26/浅析JS闭包（Closure）与函数的柯里化（Currying）/</id>
    <published>2018-04-26T07:55:57.000Z</published>
    <updated>2019-03-28T13:06:27.585Z</updated>
    
    <content type="html"><![CDATA[ <img src="/2018/04/26/浅析JS闭包（Closure）与函数的柯里化（Currying）/title_background.jpg" title="3月3号老任就要发售Switch了，还有塞尔达护航新作，然而我并没有钱买..."><a id="more"></a><h2 id="JS闭包"><a href="#JS闭包" class="headerlink" title="JS闭包"></a>JS闭包</h2><p>闭包在程序界是一个很抽象的概念，以至于被人称为编程界的哈姆雷特，我们先来看看MDN对其的解释</p><blockquote><p>Closures are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions ‘remember’ the environment in which they were created.</p><ul><li>闭包是一个函数，特指那些可以访问独立变量的函数（这种独立变量在本地使用，但是却定义在一个封闭的作用域），换句话说这类函数能够记忆创建它们时的环境</li></ul></blockquote><p>其实我个人理解更倾向于：</p><blockquote><p>当嵌套函数的引用传递给了嵌套函数作用域之外的变量，或者对象的属性，此时就会形成一个闭包</p></blockquote><p>嗯，解释的很好，但我还是不知道这是个啥<br>那还是少废话上代码吧。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'ergouzi'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">person();</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">输出：</span><br><span class="line"><span class="comment">//ergouzi</span></span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>很普通的一个函数，正常理解函数与变量的思维就是：函数执行，定义变量，函数执行完毕，变量销毁。再来看看另一种写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'ergouzi'</span>;</span><br><span class="line">  <span class="keyword">var</span> nameFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nameFunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> personFunc = person();</span><br><span class="line">personFunc();</span><br><span class="line">输出：</span><br><span class="line"><span class="comment">//ergouzi</span></span><br></pre></td></tr></table></figure></p><p>可以看到，这里即使person函数执行完毕了，但是里面的name变量却没有被销毁，这里再套用开头解释的概念，应该能理解部分了吧。咱们再来验证一下这种“被记忆的独立变量”的特性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'ergouzi'</span>;</span><br><span class="line">  <span class="keyword">var</span> funcObj = &#123;</span><br><span class="line">    <span class="string">'nameFunc'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'changeFunc'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      name = <span class="string">'goudanzi'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> funcObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funcObj = person();</span><br><span class="line">funcObj.changeFunc();</span><br><span class="line">funcObj.nameFunc();</span><br><span class="line">输出：</span><br><span class="line"><span class="comment">//goudanzi</span></span><br></pre></td></tr></table></figure></p><p>可以看到，我们在该独立变量的作用域外部改变了它的值，所以说明相同环境里创建的闭包函数，引用的独立变量为同一份拷贝，即同一个对象。其实用chrome调试一下就能很清楚的看到闭包函数长啥样，比如我这里的闭包函数它长这样（还长得挺漂亮的）</p><p><img src="http://upload-images.jianshu.io/upload_images/4730298-eba7944d4b6cba5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们可以看到两个函数“changeFunc”，“nameFunc”，从他们的Scopes里面都能找到Closure并且创建环境都为person，记忆的独立变量都为“name”，</p><p>再来看点哦莫西罗伊的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//简要解释一下输出值，因为setTimeout是异步函数，在i=0第一次循环时只是定义了第一个定时函数而并没有执行它，待到执行第一个定时函数，但此时i的值已经变了</span></span><br></pre></td></tr></table></figure></p><p>一个普通的for循环，每次循环定义了一个定时器函数，因为没有给定时器函数的句柄传参，它只能拿到i最后的值。我们换一种“闭包”一点的写法<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (<span class="name">var</span> i = <span class="number">0</span><span class="comment">; i &lt; 10; i++) &#123;</span></span><br><span class="line">  setTimeout(((<span class="name">j</span>) =&gt; console.log(<span class="name">j</span>))(<span class="name">i</span>), <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">//或者这样写</span><br><span class="line">for (<span class="name">var</span> i = <span class="number">0</span><span class="comment">; i &lt; 10; i++) &#123;</span></span><br><span class="line">  (<span class="name">j</span> =&gt; setTimeout((<span class="name">j</span>) =&gt; console.log(<span class="name">j</span>), <span class="number">0</span>))(<span class="name">i</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里用到了es6的箭头函数，想详细了解箭头函数请移步<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a><br>这里的代码将每次循环的i值传给了一个闭包函数，此时这个闭包函数记忆了这个i的值，等到执行定时函数时，就可以正常打印出i值。</p><blockquote><p>参考文档<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></p></blockquote><h2 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h2><h3 id="什么是柯里化"><a href="#什么是柯里化" class="headerlink" title="什么是柯里化"></a>什么是柯里化</h3><p>简单来说就是参数消元，比如我有以下代码<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">add</span> = <span class="params">(x, y, z)</span> =&gt;</span> x + y + z</span><br></pre></td></tr></table></figure></p><p>我们可以将它进行柯里化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="function"><span class="params">x</span> =&gt;</span> y =&gt; <span class="function"><span class="params">z</span> =&gt;</span> x + y + z</span><br></pre></td></tr></table></figure></p><h3 id="柯里化的作用"><a href="#柯里化的作用" class="headerlink" title="柯里化的作用"></a>柯里化的作用</h3><p>柯里化后的函数有个特点就是返回了一个新的函数，我们又可以对这个新的函数进行配置然后得到另一个新的函数，可以类比为函数的”预加载”功能，有了这个功能我们可以对通用代码进行一些封装，比如封装一个简单的请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requestFunc = <span class="function"><span class="params">headers</span> =&gt;</span> method =&gt; <span class="function"><span class="params">url</span> =&gt;</span> body =&gt; fetch(url, &#123;</span><br><span class="line">  method,</span><br><span class="line">  headers,</span><br><span class="line">  body,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = requestFunc(&#123;</span><br><span class="line">  <span class="string">'content-Type'</span>: <span class="string">'multipart/form-data'</span>,</span><br><span class="line">  ...params,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postRequest = request(<span class="string">'POST'</span>);</span><br><span class="line"><span class="keyword">const</span> getRequest = request(<span class="string">'GET'</span>);</span><br><span class="line"><span class="keyword">const</span> loginRequest = postRequest(<span class="string">'https://host/package/login'</span>);</span><br><span class="line"><span class="keyword">const</span> getInfoRequest = getRequest(<span class="string">'https://host/package/user/info'</span>)</span><br><span class="line"><span class="comment">// do login</span></span><br><span class="line">loginRequest(&#123; <span class="attr">name</span>: <span class="string">'Tom'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get info</span></span><br><span class="line">getInfoRequest().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;&#125;)<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p>当然，还有其他的精彩应用场景，比如使用这种特性来进行逻辑解耦和中间件的配置，Redux的源码也使用了大量柯里化函数，比如applyMiddleWare就是传入一个柯里化函数作为中间件，来获取内部状态信息。有兴趣的可以去细细品味</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/04/26/浅析JS闭包（Closure）与函数的柯里化（Currying）/title_background.jpg&quot; title=&quot;3月3号老任就要发售Switch了，还有塞尔达护航新作，然而我并没有钱买...&quot;&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
